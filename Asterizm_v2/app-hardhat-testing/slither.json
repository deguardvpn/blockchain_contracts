{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "informationUri": "https://github.com/crytic/slither",
          "version": "0.10.0",
          "rules": [
            {
              "id": "0-1-arbitrary-send-eth",
              "name": "arbitrary-send-eth",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Functions that send Ether to arbitrary destinations"
              },
              "help": {
                "text": "Ensure that an arbitrary user cannot withdraw unauthorized funds."
              }
            },
            {
              "id": "0-1-incorrect-exp",
              "name": "incorrect-exp",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Incorrect exponentiation"
              },
              "help": {
                "text": "Use the correct operator `**` for exponentiation."
              }
            },
            {
              "id": "0-0-name-reused",
              "name": "name-reused",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Name reused"
              },
              "help": {
                "text": "Rename the contract."
              }
            },
            {
              "id": "0-1-reentrancy-eth",
              "name": "reentrancy-eth",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions pattern`](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "0-0-uninitialized-state",
              "name": "uninitialized-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Uninitialized state variables"
              },
              "help": {
                "text": "\nInitialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability.\n"
              }
            },
            {
              "id": "0-0-unprotected-upgrade",
              "name": "unprotected-upgrade",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Unprotected upgradeable contract"
              },
              "help": {
                "text": "Add a constructor to ensure `initialize` cannot be called on the logic contract."
              }
            },
            {
              "id": "1-1-divide-before-multiply",
              "name": "divide-before-multiply",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Divide before multiply"
              },
              "help": {
                "text": "Consider ordering multiplication before division."
              }
            },
            {
              "id": "1-1-reentrancy-no-eth",
              "name": "reentrancy-no-eth",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "1-1-uninitialized-local",
              "name": "uninitialized-local",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Uninitialized local variables"
              },
              "help": {
                "text": "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability."
              }
            },
            {
              "id": "1-1-unused-return",
              "name": "unused-return",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unused return"
              },
              "help": {
                "text": "Ensure that all the return values of the function calls are used."
              }
            },
            {
              "id": "3-0-assembly",
              "name": "assembly",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Assembly usage"
              },
              "help": {
                "text": "Do not use `evm` assembly."
              }
            },
            {
              "id": "3-0-pragma",
              "name": "pragma",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Different pragma directives are used"
              },
              "help": {
                "text": "Use one Solidity version."
              }
            },
            {
              "id": "3-1-costly-loop",
              "name": "costly-loop",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Costly operations inside a loop"
              },
              "help": {
                "text": "Use a local variable to hold the loop computation result."
              }
            },
            {
              "id": "3-1-dead-code",
              "name": "dead-code",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Dead-code"
              },
              "help": {
                "text": "Remove unused functions."
              }
            },
            {
              "id": "3-0-solc-version",
              "name": "solc-version",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Incorrect versions of Solidity"
              },
              "help": {
                "text": "\nDeploy with any of the following Solidity versions:\n- 0.8.18\n\nThe recommendations take into account:\n- Risks related to recent releases\n- Risks of complex code generation changes\n- Risks of new language features\n- Risks of known bugs\n\nUse a simple pragma version that allows any of these versions.\nConsider using the latest version of Solidity for testing."
              }
            },
            {
              "id": "3-0-low-level-calls",
              "name": "low-level-calls",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Low-level calls"
              },
              "help": {
                "text": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence."
              }
            },
            {
              "id": "3-0-naming-convention",
              "name": "naming-convention",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Conformance to Solidity naming conventions"
              },
              "help": {
                "text": "Follow the Solidity [naming convention](https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions)."
              }
            },
            {
              "id": "3-1-similar-names",
              "name": "similar-names",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Variable names too similar"
              },
              "help": {
                "text": "Prevent variables from having similar names."
              }
            },
            {
              "id": "3-1-too-many-digits",
              "name": "too-many-digits",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Too many digits"
              },
              "help": {
                "text": "\nUse:\n- [Ether suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#ether-units),\n- [Time suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#time-units), or\n- [The scientific notation](https://solidity.readthedocs.io/en/latest/types.html#rational-and-integer-literals)\n"
              }
            },
            {
              "id": "4-0-cache-array-length",
              "name": "cache-array-length",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Cache array length"
              },
              "help": {
                "text": "Cache the lengths of storage arrays if they are used and not modified in `for` loops."
              }
            },
            {
              "id": "4-0-constable-states",
              "name": "constable-states",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "State variables that could be declared constant"
              },
              "help": {
                "text": "Add the `constant` attribute to state variables that never change."
              }
            },
            {
              "id": "4-0-immutable-states",
              "name": "immutable-states",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "State variables that could be declared immutable"
              },
              "help": {
                "text": "Add the `immutable` attribute to state variables that never change or are set only in the constructor."
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "GasStation._asterizmReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto) (contracts/projects/gas/GasStation.sol#184-203) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = dstAddress.call{value: amountToSend}() (contracts/projects/gas/GasStation.sol#198)\n",
            "markdown": "[GasStation._asterizmReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto)](contracts/projects/gas/GasStation.sol#L184-L203) sends eth to arbitrary user\n\tDangerous calls:\n\t- [(success) = dstAddress.call{value: amountToSend}()](contracts/projects/gas/GasStation.sol#L198)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 203
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "87835f9e1b9967297cde3f5d0fb10a369ab91530d89f10c429aea60f66a2919a"
          }
        },
        {
          "ruleId": "0-1-arbitrary-send-eth",
          "message": {
            "text": "GasStationUpgradeableV1._asterizmReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto) (contracts/projects/gas/GasStationUpgradeableV1.sol#149-168) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = dstAddress.call{value: amountToSend}() (contracts/projects/gas/GasStationUpgradeableV1.sol#163)\n",
            "markdown": "[GasStationUpgradeableV1._asterizmReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto)](contracts/projects/gas/GasStationUpgradeableV1.sol#L149-L168) sends eth to arbitrary user\n\tDangerous calls:\n\t- [(success) = dstAddress.call{value: amountToSend}()](contracts/projects/gas/GasStationUpgradeableV1.sol#L163)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 168
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97b88d8bea397f5e86d427e9067b74fbc8149576ebedf56f80a1e86a745d20b3"
          }
        },
        {
          "ruleId": "0-1-incorrect-exp",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#116)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) has bitwise-xor operator ^ instead of the exponentiation operator **: \n\t - [inverse = (3 * denominator) ^ 2](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "583e5406612b5abe2cf280b379696b05a5cfcbd5ab5c42cf25c17a4bf5fa3c4a"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "IClientReceiverContract is re-used:\n\t- IClientReceiverContract (node_modules/asterizmprotocol/contracts/evm/interfaces/IClientReceiverContract.sol#6-24)\n\t- IClientReceiverContract (contracts/interfaces/IClientReceiverContract.sol#6-20)\n",
            "markdown": "IClientReceiverContract is re-used:\n\t- [IClientReceiverContract](node_modules/asterizmprotocol/contracts/evm/interfaces/IClientReceiverContract.sol#L6-L24)\n\t- [IClientReceiverContract](contracts/interfaces/IClientReceiverContract.sol#L6-L20)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/interfaces/IClientReceiverContract.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "06237f477cd0497087f0f584f2b2358b37c7e1d76defdf7c58fefbcf5b8be241"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "AddressLib is re-used:\n\t- AddressLib (node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#4-40)\n\t- AddressLib (contracts/libs/AddressLib.sol#4-40)\n",
            "markdown": "AddressLib is re-used:\n\t- [AddressLib](node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#L4-L40)\n\t- [AddressLib](contracts/libs/AddressLib.sol#L4-L40)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0cf2a3f5a182262097b9e509da9412fd38835878f611144b65156c784aab8995"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "IInitializerSender is re-used:\n\t- IInitializerSender (node_modules/asterizmprotocol/contracts/evm/interfaces/IInitializerSender.sol#7-30)\n\t- IInitializerSender (contracts/interfaces/IInitializerSender.sol#7-29)\n",
            "markdown": "IInitializerSender is re-used:\n\t- [IInitializerSender](node_modules/asterizmprotocol/contracts/evm/interfaces/IInitializerSender.sol#L7-L30)\n\t- [IInitializerSender](contracts/interfaces/IInitializerSender.sol#L7-L29)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/interfaces/IInitializerSender.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "114b95a31579cdccb78a583b60ef0db7a7b5f1b012d60189d3fcbb7f2f488dab"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "IAsterizmEnv is re-used:\n\t- IAsterizmEnv (node_modules/asterizmprotocol/contracts/evm/interfaces/IAsterizmEnv.sol#4-163)\n\t- IAsterizmEnv (contracts/interfaces/IAsterizmEnv.sol#4-160)\n",
            "markdown": "IAsterizmEnv is re-used:\n\t- [IAsterizmEnv](node_modules/asterizmprotocol/contracts/evm/interfaces/IAsterizmEnv.sol#L4-L163)\n\t- [IAsterizmEnv](contracts/interfaces/IAsterizmEnv.sol#L4-L160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/interfaces/IAsterizmEnv.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 163
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "304579a36078759b1099ef50045fd88dd45f4fc524aff89ee7e537082d186bf9"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "AsterizmHashLib is re-used:\n\t- AsterizmHashLib (node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#4-45)\n\t- AsterizmHashLib (contracts/libs/AsterizmHashLib.sol#4-45)\n",
            "markdown": "AsterizmHashLib is re-used:\n\t- [AsterizmHashLib](node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#L4-L45)\n\t- [AsterizmHashLib](contracts/libs/AsterizmHashLib.sol#L4-L45)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4af1fced27140787d9f40fb2f0baa380b60217fc32754853f7f4937fa90bd89f"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "AsterizmEnv is re-used:\n\t- AsterizmEnv (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#6-214)\n\t- AsterizmEnv (contracts/base/AsterizmEnv.sol#6-205)\n",
            "markdown": "AsterizmEnv is re-used:\n\t- [AsterizmEnv](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L6-L214)\n\t- [AsterizmEnv](contracts/base/AsterizmEnv.sol#L6-L205)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 214
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "949d33c997e74c72157f4e8a380740163848f522bffbd95d5861d2d47eabbdba"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "AsterizmClient is re-used:\n\t- AsterizmClient (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#13-479)\n\t- AsterizmClient (contracts/base/AsterizmClient.sol#13-412)\n",
            "markdown": "AsterizmClient is re-used:\n\t- [AsterizmClient](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L13-L479)\n\t- [AsterizmClient](contracts/base/AsterizmClient.sol#L13-L412)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 479
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a9dff841806c62af398bab9b96b86513281edec4dcb498bd1d9eaeaf2cf3fcdf"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "UintLib is re-used:\n\t- UintLib (node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol#4-12)\n\t- UintLib (contracts/libs/UintLib.sol#4-12)\n",
            "markdown": "UintLib is re-used:\n\t- [UintLib](node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol#L4-L12)\n\t- [UintLib](contracts/libs/UintLib.sol#L4-L12)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 12
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b5d5ae337139501467d2ce389f731e2059fc35da4d89dcb5e4c7196077d5bc44"
          }
        },
        {
          "ruleId": "0-1-reentrancy-eth",
          "message": {
            "text": "Reentrancy in AsterizmClient._initAsterizmTransferPrivate(IAsterizmEnv.ClInitTransferRequestDto) (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#393-403):\n\tExternal calls:\n\t- initializerLib.initTransfer{value: _dto.feeAmount}(_buildIzIninTransferRequestDto(_dto.dstChainId,_dto.dstAddress,_dto.txId,_dto.transferHash,externalRelay,notifyTransferSendingResult)) (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#399-401)\n\tState variables written after the call(s):\n\t- outboundTransfers[_dto.transferHash].successExecute = true (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#402)\n\tAsterizmClient.outboundTransfers (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#100) can be used in cross function reentrancies:\n\t- AsterizmClient.onlyExecutedOutboundTransfer(bytes32) (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#190-193)\n\t- AsterizmClient.onlyExistsOutboundTransfer(bytes32) (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#176-179)\n",
            "markdown": "Reentrancy in [AsterizmClient._initAsterizmTransferPrivate(IAsterizmEnv.ClInitTransferRequestDto)](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L393-L403):\n\tExternal calls:\n\t- [initializerLib.initTransfer{value: _dto.feeAmount}(_buildIzIninTransferRequestDto(_dto.dstChainId,_dto.dstAddress,_dto.txId,_dto.transferHash,externalRelay,notifyTransferSendingResult))](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L399-L401)\n\tState variables written after the call(s):\n\t- [outboundTransfers[_dto.transferHash].successExecute = true](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L402)\n\t[AsterizmClient.outboundTransfers](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L100) can be used in cross function reentrancies:\n\t- [AsterizmClient.onlyExecutedOutboundTransfer(bytes32)](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L190-L193)\n\t- [AsterizmClient.onlyExistsOutboundTransfer(bytes32)](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L176-L179)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2890b5c1e99a92b405c3c1f07eff0edcbf115da99e54415fe90af9808d5bd9da"
          }
        },
        {
          "ruleId": "0-1-reentrancy-eth",
          "message": {
            "text": "Reentrancy in AsterizmClientUpgradeable._initAsterizmTransferPrivate(IAsterizmEnv.ClInitTransferRequestDto) (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#402-412):\n\tExternal calls:\n\t- initializerLib.initTransfer{value: _dto.feeAmount}(_buildIzIninTransferRequestDto(_dto.dstChainId,_dto.dstAddress,_dto.txId,_dto.transferHash,externalRelay,notifyTransferSendingResult)) (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#408-410)\n\tState variables written after the call(s):\n\t- outboundTransfers[_dto.transferHash].successExecute = true (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#411)\n\tAsterizmClientUpgradeable.outboundTransfers (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#101) can be used in cross function reentrancies:\n\t- AsterizmClientUpgradeable.onlyExecutedOutboundTransfer(bytes32) (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#199-202)\n\t- AsterizmClientUpgradeable.onlyExistsOutboundTransfer(bytes32) (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#185-188)\n",
            "markdown": "Reentrancy in [AsterizmClientUpgradeable._initAsterizmTransferPrivate(IAsterizmEnv.ClInitTransferRequestDto)](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L402-L412):\n\tExternal calls:\n\t- [initializerLib.initTransfer{value: _dto.feeAmount}(_buildIzIninTransferRequestDto(_dto.dstChainId,_dto.dstAddress,_dto.txId,_dto.transferHash,externalRelay,notifyTransferSendingResult))](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L408-L410)\n\tState variables written after the call(s):\n\t- [outboundTransfers[_dto.transferHash].successExecute = true](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L411)\n\t[AsterizmClientUpgradeable.outboundTransfers](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L101) can be used in cross function reentrancies:\n\t- [AsterizmClientUpgradeable.onlyExecutedOutboundTransfer(bytes32)](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L199-L202)\n\t- [AsterizmClientUpgradeable.onlyExistsOutboundTransfer(bytes32)](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L185-L188)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 412
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2d27c8b6be35fd7827df5647f22b1925bd75dafce3e7cb1cdba0e37b7aebf24c"
          }
        },
        {
          "ruleId": "0-1-reentrancy-eth",
          "message": {
            "text": "Reentrancy in AsterizmClient._initAsterizmTransferPrivate(IAsterizmEnv.ClInitTransferRequestDto) (contracts/base/AsterizmClient.sol#334-344):\n\tExternal calls:\n\t- initializerLib.initTransfer{value: _dto.feeAmount}(_buildIzIninTransferRequestDto(_dto.dstChainId,_dto.dstAddress,_dto.txId,_dto.transferHash,useForceOrder,_dto.payload)) (contracts/base/AsterizmClient.sol#340-342)\n\tState variables written after the call(s):\n\t- outboundTransfers[_dto.transferHash].successExecute = true (contracts/base/AsterizmClient.sol#343)\n\tAsterizmClient.outboundTransfers (contracts/base/AsterizmClient.sol#85) can be used in cross function reentrancies:\n\t- AsterizmClient.onlyExecutedOutboundTransfer(bytes32) (contracts/base/AsterizmClient.sol#157-160)\n\t- AsterizmClient.onlyExistsOutboundTransfer(bytes32) (contracts/base/AsterizmClient.sol#143-146)\n",
            "markdown": "Reentrancy in [AsterizmClient._initAsterizmTransferPrivate(IAsterizmEnv.ClInitTransferRequestDto)](contracts/base/AsterizmClient.sol#L334-L344):\n\tExternal calls:\n\t- [initializerLib.initTransfer{value: _dto.feeAmount}(_buildIzIninTransferRequestDto(_dto.dstChainId,_dto.dstAddress,_dto.txId,_dto.transferHash,useForceOrder,_dto.payload))](contracts/base/AsterizmClient.sol#L340-L342)\n\tState variables written after the call(s):\n\t- [outboundTransfers[_dto.transferHash].successExecute = true](contracts/base/AsterizmClient.sol#L343)\n\t[AsterizmClient.outboundTransfers](contracts/base/AsterizmClient.sol#L85) can be used in cross function reentrancies:\n\t- [AsterizmClient.onlyExecutedOutboundTransfer(bytes32)](contracts/base/AsterizmClient.sol#L157-L160)\n\t- [AsterizmClient.onlyExistsOutboundTransfer(bytes32)](contracts/base/AsterizmClient.sol#L143-L146)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 344
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4025cc69647d279eb704e6a007871b7f3e9da6a3266524a55a250e8524688e7"
          }
        },
        {
          "ruleId": "0-0-uninitialized-state",
          "message": {
            "text": "GasStatioValidator._gasStation (contracts/projects/gas/base/GasStationValidator.sol#21) is never initialized. It is used in:\n\t- GasStatioValidator.gasStation() (contracts/projects/gas/base/GasStationValidator.sol#83-85)\n",
            "markdown": "[GasStatioValidator._gasStation](contracts/projects/gas/base/GasStationValidator.sol#L21) is never initialized. It is used in:\n\t- [GasStatioValidator.gasStation()](contracts/projects/gas/base/GasStationValidator.sol#L83-L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d637aec6d659ef9bb3433873d64c067508fe0db83979f4cbfb06a323db751b7e"
          }
        },
        {
          "ruleId": "0-0-unprotected-upgrade",
          "message": {
            "text": "AsterizmInitializerV1 (contracts/AsterizmInitializerV1.sol#16-209) is an upgradeable contract that does not protect its initialize functions: AsterizmInitializerV1.initialize(ITranslator) (contracts/AsterizmInitializerV1.sol#73-81). Anyone can delete the contract with: UUPSUpgradeable.upgradeTo(address) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#74-77)UUPSUpgradeable.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#89-92)",
            "markdown": "[AsterizmInitializerV1](contracts/AsterizmInitializerV1.sol#L16-L209) is an upgradeable contract that does not protect its initialize functions: [AsterizmInitializerV1.initialize(ITranslator)](contracts/AsterizmInitializerV1.sol#L73-L81). Anyone can delete the contract with: [UUPSUpgradeable.upgradeTo(address)](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L74-L77)[UUPSUpgradeable.upgradeToAndCall(address,bytes)](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L89-L92)"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f832b63a9c1dd9db0cbdb9048a692b638f21c03e892208e42cfe743b2876df9"
          }
        },
        {
          "ruleId": "0-0-unprotected-upgrade",
          "message": {
            "text": "AsterizmTranslatorV1 (contracts/AsterizmTranslatorV1.sol#14-271) is an upgradeable contract that does not protect its initialize functions: AsterizmTranslatorV1.initialize(uint64,uint8) (contracts/AsterizmTranslatorV1.sol#89-97). Anyone can delete the contract with: UUPSUpgradeable.upgradeTo(address) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#74-77)UUPSUpgradeable.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#89-92)",
            "markdown": "[AsterizmTranslatorV1](contracts/AsterizmTranslatorV1.sol#L14-L271) is an upgradeable contract that does not protect its initialize functions: [AsterizmTranslatorV1.initialize(uint64,uint8)](contracts/AsterizmTranslatorV1.sol#L89-L97). Anyone can delete the contract with: [UUPSUpgradeable.upgradeTo(address)](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L74-L77)[UUPSUpgradeable.upgradeToAndCall(address,bytes)](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L89-L92)"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 271
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d5fc83f4044b6b57b4c24ce860b0466d27269b6d73870990c264a73c06e9f6e"
          }
        },
        {
          "ruleId": "0-0-unprotected-upgrade",
          "message": {
            "text": "DeGuardNFT (contracts/DeGuardNFT.sol#19-311) is an upgradeable contract that does not protect its initialize functions: DeGuardNFT.initialize(IInitializerSender) (contracts/DeGuardNFT.sol#85-92). Anyone can delete the contract with: UUPSUpgradeable.upgradeTo(address) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#74-77)UUPSUpgradeable.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#89-92)",
            "markdown": "[DeGuardNFT](contracts/DeGuardNFT.sol#L19-L311) is an upgradeable contract that does not protect its initialize functions: [DeGuardNFT.initialize(IInitializerSender)](contracts/DeGuardNFT.sol#L85-L92). Anyone can delete the contract with: [UUPSUpgradeable.upgradeTo(address)](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L74-L77)[UUPSUpgradeable.upgradeToAndCall(address,bytes)](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L89-L92)"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 311
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5cd08be7411eccf34f215e9000be79c0204275b38353fbba5bab6859f5b45c9e"
          }
        },
        {
          "ruleId": "0-0-unprotected-upgrade",
          "message": {
            "text": "GasStationUpgradeableV1 (contracts/projects/gas/GasStationUpgradeableV1.sol#8-178) is an upgradeable contract that does not protect its initialize functions: GasStationUpgradeableV1.initialize(IInitializerSender,bool) (contracts/projects/gas/GasStationUpgradeableV1.sol#38-40). Anyone can delete the contract with: UUPSUpgradeable.upgradeTo(address) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#74-77)UUPSUpgradeable.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#89-92)",
            "markdown": "[GasStationUpgradeableV1](contracts/projects/gas/GasStationUpgradeableV1.sol#L8-L178) is an upgradeable contract that does not protect its initialize functions: [GasStationUpgradeableV1.initialize(IInitializerSender,bool)](contracts/projects/gas/GasStationUpgradeableV1.sol#L38-L40). Anyone can delete the contract with: [UUPSUpgradeable.upgradeTo(address)](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L74-L77)[UUPSUpgradeable.upgradeToAndCall(address,bytes)](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L89-L92)"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 178
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6d81eea5775d8bcc8072532e93f955ba8bed58e9222a0a27f7659a28cc64076"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#121)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L101)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L121)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "067412ce6f0c2c982d419d9ab93822285b3f99c7db2ae10a4c302623f2222f93"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#124)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L101)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L124)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "28efd03361fc9e258e883a4a6818d9667112d0166755068e2fc72185812e7a8c"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#120)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L101)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L120)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44817248c4c684e351af67e28e7aaf25e82e6e94021ff3996b2a7f383d83e461"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#125)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L101)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L125)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "698a612b791b0dd9bf358765ee59fb30cb3bfeb7864b95fbdc837e16abd5a2df"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)\n\t- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#116)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L101)\n\t- [inverse = (3 * denominator) ^ 2](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a734d76c39df53b98f3f14b6cc82e844b406ca52c6ba395f0a02110be309c042"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#122)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L101)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L122)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "caac2d5f20527e03f03e0097850f5ab5faab0fbd03d22ad58843a4e408021953"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#104)\n\t- result = prod0 * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#131)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) performs a multiplication on the result of a division:\n\t- [prod0 = prod0 / twos](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L104)\n\t- [result = prod0 * inverse](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L131)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e6f05eb1423965bff01fbc6fb0e7ff2f1f4c2e276bfbd08ec488d871b263f1b9"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#123)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L101)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6282d472d7fa4efcb26a54aab8bf4b94c069de6bb4511088cdb0d5f28f02e8c"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in GasStation.withdrawTokens(IERC20,address,uint256) (contracts/projects/gas/GasStation.sol#58-69):\n\tExternal calls:\n\t- _token.safeTransfer(_target,_amount) (contracts/projects/gas/GasStation.sol#62)\n\tState variables written after the call(s):\n\t- stableCoins[tokenAddress].balance -= _amount (contracts/projects/gas/GasStation.sol#64)\n\tGasStation.stableCoins (contracts/projects/gas/GasStation.sol#31) can be used in cross function reentrancies:\n\t- GasStation.addStableCoin(address) (contracts/projects/gas/GasStation.sol#91-99)\n\t- GasStation.removeStableCoin(address) (contracts/projects/gas/GasStation.sol#103-106)\n\t- GasStation.stableCoins (contracts/projects/gas/GasStation.sol#31)\n\t- GasStation.withdrawNotExistsTokens(IERC20,address,uint256) (contracts/projects/gas/GasStation.sol#75-87)\n\t- GasStation.withdrawTokens(IERC20,address,uint256) (contracts/projects/gas/GasStation.sol#58-69)\n\t- stableCoins[tokenAddress].balance = 0 (contracts/projects/gas/GasStation.sol#66)\n\tGasStation.stableCoins (contracts/projects/gas/GasStation.sol#31) can be used in cross function reentrancies:\n\t- GasStation.addStableCoin(address) (contracts/projects/gas/GasStation.sol#91-99)\n\t- GasStation.removeStableCoin(address) (contracts/projects/gas/GasStation.sol#103-106)\n\t- GasStation.stableCoins (contracts/projects/gas/GasStation.sol#31)\n\t- GasStation.withdrawNotExistsTokens(IERC20,address,uint256) (contracts/projects/gas/GasStation.sol#75-87)\n\t- GasStation.withdrawTokens(IERC20,address,uint256) (contracts/projects/gas/GasStation.sol#58-69)\n",
            "markdown": "Reentrancy in [GasStation.withdrawTokens(IERC20,address,uint256)](contracts/projects/gas/GasStation.sol#L58-L69):\n\tExternal calls:\n\t- [_token.safeTransfer(_target,_amount)](contracts/projects/gas/GasStation.sol#L62)\n\tState variables written after the call(s):\n\t- [stableCoins[tokenAddress].balance -= _amount](contracts/projects/gas/GasStation.sol#L64)\n\t[GasStation.stableCoins](contracts/projects/gas/GasStation.sol#L31) can be used in cross function reentrancies:\n\t- [GasStation.addStableCoin(address)](contracts/projects/gas/GasStation.sol#L91-L99)\n\t- [GasStation.removeStableCoin(address)](contracts/projects/gas/GasStation.sol#L103-L106)\n\t- [GasStation.stableCoins](contracts/projects/gas/GasStation.sol#L31)\n\t- [GasStation.withdrawNotExistsTokens(IERC20,address,uint256)](contracts/projects/gas/GasStation.sol#L75-L87)\n\t- [GasStation.withdrawTokens(IERC20,address,uint256)](contracts/projects/gas/GasStation.sol#L58-L69)\n\t- [stableCoins[tokenAddress].balance = 0](contracts/projects/gas/GasStation.sol#L66)\n\t[GasStation.stableCoins](contracts/projects/gas/GasStation.sol#L31) can be used in cross function reentrancies:\n\t- [GasStation.addStableCoin(address)](contracts/projects/gas/GasStation.sol#L91-L99)\n\t- [GasStation.removeStableCoin(address)](contracts/projects/gas/GasStation.sol#L103-L106)\n\t- [GasStation.stableCoins](contracts/projects/gas/GasStation.sol#L31)\n\t- [GasStation.withdrawNotExistsTokens(IERC20,address,uint256)](contracts/projects/gas/GasStation.sol#L75-L87)\n\t- [GasStation.withdrawTokens(IERC20,address,uint256)](contracts/projects/gas/GasStation.sol#L58-L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a04fa3fdfea84b139589204ddc7d896b4f6b249c9fb04f3d287e90fd8a118da"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in GasStation.sendGas(uint64[],uint256[],uint256[],IERC20) (contracts/projects/gas/GasStation.sol#141-180):\n\tExternal calls:\n\t- _token.safeTransferFrom(msg.sender,address(this),sum) (contracts/projects/gas/GasStation.sol#172)\n\tState variables written after the call(s):\n\t- stableCoins[tokenAddress].balance += sum (contracts/projects/gas/GasStation.sol#173)\n\tGasStation.stableCoins (contracts/projects/gas/GasStation.sol#31) can be used in cross function reentrancies:\n\t- GasStation.addStableCoin(address) (contracts/projects/gas/GasStation.sol#91-99)\n\t- GasStation.removeStableCoin(address) (contracts/projects/gas/GasStation.sol#103-106)\n\t- GasStation.stableCoins (contracts/projects/gas/GasStation.sol#31)\n\t- GasStation.withdrawNotExistsTokens(IERC20,address,uint256) (contracts/projects/gas/GasStation.sol#75-87)\n\t- GasStation.withdrawTokens(IERC20,address,uint256) (contracts/projects/gas/GasStation.sol#58-69)\n",
            "markdown": "Reentrancy in [GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)](contracts/projects/gas/GasStation.sol#L141-L180):\n\tExternal calls:\n\t- [_token.safeTransferFrom(msg.sender,address(this),sum)](contracts/projects/gas/GasStation.sol#L172)\n\tState variables written after the call(s):\n\t- [stableCoins[tokenAddress].balance += sum](contracts/projects/gas/GasStation.sol#L173)\n\t[GasStation.stableCoins](contracts/projects/gas/GasStation.sol#L31) can be used in cross function reentrancies:\n\t- [GasStation.addStableCoin(address)](contracts/projects/gas/GasStation.sol#L91-L99)\n\t- [GasStation.removeStableCoin(address)](contracts/projects/gas/GasStation.sol#L103-L106)\n\t- [GasStation.stableCoins](contracts/projects/gas/GasStation.sol#L31)\n\t- [GasStation.withdrawNotExistsTokens(IERC20,address,uint256)](contracts/projects/gas/GasStation.sol#L75-L87)\n\t- [GasStation.withdrawTokens(IERC20,address,uint256)](contracts/projects/gas/GasStation.sol#L58-L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 180
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a0fcfa2c2b9a871e5b6ca05dc61ccd173c4ac54aa667ed1531433b01e209082a"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in DeGuardNFT.buyPlan(uint256,uint64,address,bool) (contracts/DeGuardNFT.sol#183-201):\n\tExternal calls:\n\t- _safeMint(user,tokenId) (contracts/DeGuardNFT.sol#195)\n\t\t- retval = IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(),from,tokenId,data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#411-422)\n\t- crossChainTransfer(_dstChainId,user,_to,tokenId) (contracts/DeGuardNFT.sol#199)\n\t\t- transferHash = _buildTransferHash(_getLocalChainId(),address(this).toUint(),_dstChainId,trustedAddresses[_dstChainId].trustedAddress,id,_payload) (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#383)\n\tState variables written after the call(s):\n\t- crossChainTransfer(_dstChainId,user,_to,tokenId) (contracts/DeGuardNFT.sol#199)\n\t\t- _allTokens.push(tokenId) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#110)\n\t\t- _allTokens[tokenIndex] = lastTokenId (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#158)\n\t\t- _allTokens.pop() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#163)\n\tERC721EnumerableUpgradeable._allTokens (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#28) can be used in cross function reentrancies:\n\t- ERC721EnumerableUpgradeable._addTokenToAllTokensEnumeration(uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#108-111)\n\t- ERC721EnumerableUpgradeable._removeTokenFromAllTokensEnumeration(uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#146-164)\n\t- ERC721EnumerableUpgradeable.tokenByIndex(uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#58-61)\n\t- ERC721EnumerableUpgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#51-53)\n\t- crossChainTransfer(_dstChainId,user,_to,tokenId) (contracts/DeGuardNFT.sol#199)\n\t\t- _allTokensIndex[tokenId] = _allTokens.length (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#109)\n\t\t- _allTokensIndex[lastTokenId] = tokenIndex (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#159)\n\t\t- delete _allTokensIndex[tokenId] (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#162)\n\tERC721EnumerableUpgradeable._allTokensIndex (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#31) can be used in cross function reentrancies:\n\t- ERC721EnumerableUpgradeable._addTokenToAllTokensEnumeration(uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#108-111)\n\t- ERC721EnumerableUpgradeable._removeTokenFromAllTokensEnumeration(uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#146-164)\n\t- crossChainTransfer(_dstChainId,user,_to,tokenId) (contracts/DeGuardNFT.sol#199)\n\t\t- _balances[owner] -= 1 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#318)\n\tERC721Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#34) can be used in cross function reentrancies:\n\t- ERC721Upgradeable._burn(uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#304-325)\n\t- ERC721Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#338-364)\n\t- ERC721Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#67-70)\n\t- crossChainTransfer(_dstChainId,user,_to,tokenId) (contracts/DeGuardNFT.sol#199)\n\t\t- _ownedTokens[to][length] = tokenId (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#100)\n\t\t- _ownedTokens[from][tokenIndex] = lastTokenId (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#132)\n\t\t- delete _ownedTokens[from][lastTokenIndex] (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#138)\n\tERC721EnumerableUpgradeable._ownedTokens (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#22) can be used in cross function reentrancies:\n\t- ERC721EnumerableUpgradeable._addTokenToOwnerEnumeration(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#98-102)\n\t- ERC721EnumerableUpgradeable._removeTokenFromOwnerEnumeration(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#121-139)\n\t- ERC721EnumerableUpgradeable.tokenOfOwnerByIndex(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#43-46)\n\t- crossChainTransfer(_dstChainId,user,_to,tokenId) (contracts/DeGuardNFT.sol#199)\n\t\t- _ownedTokensIndex[tokenId] = length (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#101)\n\t\t- _ownedTokensIndex[lastTokenId] = tokenIndex (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#133)\n\t\t- delete _ownedTokensIndex[tokenId] (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#137)\n\tERC721EnumerableUpgradeable._ownedTokensIndex (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#25) can be used in cross function reentrancies:\n\t- ERC721EnumerableUpgradeable._addTokenToOwnerEnumeration(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#98-102)\n\t- ERC721EnumerableUpgradeable._removeTokenFromOwnerEnumeration(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#121-139)\n\t- crossChainTransfer(_dstChainId,user,_to,tokenId) (contracts/DeGuardNFT.sol#199)\n\t\t- delete _owners[tokenId] (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#320)\n\tERC721Upgradeable._owners (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#31) can be used in cross function reentrancies:\n\t- ERC721Upgradeable._burn(uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#304-325)\n\t- ERC721Upgradeable._ownerOf(uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#203-205)\n\t- ERC721Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#338-364)\n",
            "markdown": "Reentrancy in [DeGuardNFT.buyPlan(uint256,uint64,address,bool)](contracts/DeGuardNFT.sol#L183-L201):\n\tExternal calls:\n\t- [_safeMint(user,tokenId)](contracts/DeGuardNFT.sol#L195)\n\t\t- [retval = IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(),from,tokenId,data)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L411-L422)\n\t- [crossChainTransfer(_dstChainId,user,_to,tokenId)](contracts/DeGuardNFT.sol#L199)\n\t\t- [transferHash = _buildTransferHash(_getLocalChainId(),address(this).toUint(),_dstChainId,trustedAddresses[_dstChainId].trustedAddress,id,_payload)](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L383)\n\tState variables written after the call(s):\n\t- [crossChainTransfer(_dstChainId,user,_to,tokenId)](contracts/DeGuardNFT.sol#L199)\n\t\t- [_allTokens.push(tokenId)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L110)\n\t\t- [_allTokens[tokenIndex] = lastTokenId](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L158)\n\t\t- [_allTokens.pop()](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L163)\n\t[ERC721EnumerableUpgradeable._allTokens](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L28) can be used in cross function reentrancies:\n\t- [ERC721EnumerableUpgradeable._addTokenToAllTokensEnumeration(uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L108-L111)\n\t- [ERC721EnumerableUpgradeable._removeTokenFromAllTokensEnumeration(uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L146-L164)\n\t- [ERC721EnumerableUpgradeable.tokenByIndex(uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L58-L61)\n\t- [ERC721EnumerableUpgradeable.totalSupply()](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L51-L53)\n\t- [crossChainTransfer(_dstChainId,user,_to,tokenId)](contracts/DeGuardNFT.sol#L199)\n\t\t- [_allTokensIndex[tokenId] = _allTokens.length](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L109)\n\t\t- [_allTokensIndex[lastTokenId] = tokenIndex](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L159)\n\t\t- [delete _allTokensIndex[tokenId]](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L162)\n\t[ERC721EnumerableUpgradeable._allTokensIndex](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L31) can be used in cross function reentrancies:\n\t- [ERC721EnumerableUpgradeable._addTokenToAllTokensEnumeration(uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L108-L111)\n\t- [ERC721EnumerableUpgradeable._removeTokenFromAllTokensEnumeration(uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L146-L164)\n\t- [crossChainTransfer(_dstChainId,user,_to,tokenId)](contracts/DeGuardNFT.sol#L199)\n\t\t- [_balances[owner] -= 1](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L318)\n\t[ERC721Upgradeable._balances](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L34) can be used in cross function reentrancies:\n\t- [ERC721Upgradeable._burn(uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L304-L325)\n\t- [ERC721Upgradeable._transfer(address,address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L338-L364)\n\t- [ERC721Upgradeable.balanceOf(address)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L67-L70)\n\t- [crossChainTransfer(_dstChainId,user,_to,tokenId)](contracts/DeGuardNFT.sol#L199)\n\t\t- [_ownedTokens[to][length] = tokenId](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L100)\n\t\t- [_ownedTokens[from][tokenIndex] = lastTokenId](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L132)\n\t\t- [delete _ownedTokens[from][lastTokenIndex]](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L138)\n\t[ERC721EnumerableUpgradeable._ownedTokens](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L22) can be used in cross function reentrancies:\n\t- [ERC721EnumerableUpgradeable._addTokenToOwnerEnumeration(address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L98-L102)\n\t- [ERC721EnumerableUpgradeable._removeTokenFromOwnerEnumeration(address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L121-L139)\n\t- [ERC721EnumerableUpgradeable.tokenOfOwnerByIndex(address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L43-L46)\n\t- [crossChainTransfer(_dstChainId,user,_to,tokenId)](contracts/DeGuardNFT.sol#L199)\n\t\t- [_ownedTokensIndex[tokenId] = length](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L101)\n\t\t- [_ownedTokensIndex[lastTokenId] = tokenIndex](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L133)\n\t\t- [delete _ownedTokensIndex[tokenId]](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L137)\n\t[ERC721EnumerableUpgradeable._ownedTokensIndex](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L25) can be used in cross function reentrancies:\n\t- [ERC721EnumerableUpgradeable._addTokenToOwnerEnumeration(address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L98-L102)\n\t- [ERC721EnumerableUpgradeable._removeTokenFromOwnerEnumeration(address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L121-L139)\n\t- [crossChainTransfer(_dstChainId,user,_to,tokenId)](contracts/DeGuardNFT.sol#L199)\n\t\t- [delete _owners[tokenId]](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L320)\n\t[ERC721Upgradeable._owners](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L31) can be used in cross function reentrancies:\n\t- [ERC721Upgradeable._burn(uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L304-L325)\n\t- [ERC721Upgradeable._ownerOf(uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L203-L205)\n\t- [ERC721Upgradeable._transfer(address,address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L338-L364)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 201
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f92eec5d57263d0199b8155a17471464c844afa20e992aad3093125fc52e6d71"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildClInitTransferRequestDto(uint64,uint256,uint256,bytes32,uint256).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#35) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildClInitTransferRequestDto(uint64,uint256,uint256,bytes32,uint256).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L35) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0532b1846725a76b93937a08a7e7e93903671da4f67ed94de1efc7984144883e"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildTrSendMessageRequestDto(uint256,uint64,uint256,uint256,bool,uint256,bytes32,bytes).dto (contracts/base/AsterizmEnv.sol#77) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildTrSendMessageRequestDto(uint256,uint64,uint256,uint256,bool,uint256,bytes32,bytes).dto](contracts/base/AsterizmEnv.sol#L77) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1facbcab9ff5a6a963b32f3990972f8302b1a9317c7705bdbc233fb407938562"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildTrTarnsferMessageRequestDto(uint256,bytes).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#89) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildTrTarnsferMessageRequestDto(uint256,bytes).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L89) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e6b596641b15f526479f813e9a3657568e2549407ae758c9b7de22d12e7753d"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildInternalClInitTransferRequestDto(uint64,uint256,uint256,bytes).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#52) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildInternalClInitTransferRequestDto(uint64,uint256,uint256,bytes).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L52) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43292685e80c2378cb6d7354f79b56bfeac34a2b6dee6b20f06446fce780e63b"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildIzRetryPayloadRequestDto(uint64,uint256,uint64,uint256,uint256,uint256,bool,bytes32,bytes).dto (contracts/base/AsterizmEnv.sol#192) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildIzRetryPayloadRequestDto(uint64,uint256,uint64,uint256,uint256,uint256,bool,bytes32,bytes).dto](contracts/base/AsterizmEnv.sol#L192) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 192,
                  "endLine": 192
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4b275175211cbd9c379748aeeadaa5510f0246c6b8cd3dcd8b6fe872e50ddda9"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildClInitTransferRequestDto(uint64,uint256,uint256,bytes32,uint256,bytes).dto (contracts/base/AsterizmEnv.sol#36) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildClInitTransferRequestDto(uint64,uint256,uint256,bytes32,uint256,bytes).dto](contracts/base/AsterizmEnv.sol#L36) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5a49168b586123b873767ce38afa8acd4a37b22203f912f5b68aee1b409310f5"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildIzAsterizmReceiveRequestDto(uint64,uint256,uint64,uint256,uint256,bytes32).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#128) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildIzAsterizmReceiveRequestDto(uint64,uint256,uint64,uint256,uint256,bytes32).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L128) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "64c7d4b41b1b1f064f8b4005c2fbb93de480b7e7134b5ab0d0172725bdc455b2"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildIzIninTransferRequestDto(uint64,uint256,uint256,bytes32,bool,bytes).dto (contracts/base/AsterizmEnv.sol#111) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildIzIninTransferRequestDto(uint64,uint256,uint256,bytes32,bool,bytes).dto](contracts/base/AsterizmEnv.sol#L111) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e2cb1012dbaa08697d05d4ca27be289c93e53b3ace25652af80fbfc9e6db680"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildClAsterizmReceiveRequestDto(uint64,uint256,uint64,uint256,uint256,uint256,bytes32,bytes).dto (contracts/base/AsterizmEnv.sol#136) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildClAsterizmReceiveRequestDto(uint64,uint256,uint64,uint256,uint256,uint256,bytes32,bytes).dto](contracts/base/AsterizmEnv.sol#L136) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a596a08d6d68b0538ebb7762833ff349fd1deca4df15fc6f7a92db284d55a87"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildIzReceivePayloadRequestDto(IAsterizmEnv.BaseTransferDirectionDto,uint256,uint256,bool,uint256,bytes32,bytes).dto (contracts/base/AsterizmEnv.sol#162) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildIzReceivePayloadRequestDto(IAsterizmEnv.BaseTransferDirectionDto,uint256,uint256,bool,uint256,bytes32,bytes).dto](contracts/base/AsterizmEnv.sol#L162) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a5a5d7ef7772ba30b555b445d8e66c8b4b2f779d6f799a4ad5e9d1fd99274e8"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildIzReceivePayloadRequestDto(IAsterizmEnv.BaseTransferDirectionDto,uint256,uint256,bytes32).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#174) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildIzReceivePayloadRequestDto(IAsterizmEnv.BaseTransferDirectionDto,uint256,uint256,bytes32).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L174) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 174,
                  "endLine": 174
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b312084b7e1dc2198cf85e8ff17ae6e3e14dda177df4a7776ae9ffc317d84843"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildBaseTransferDirectionDto(uint64,uint256,uint64,uint256).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#18) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildBaseTransferDirectionDto(uint64,uint256,uint64,uint256).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L18) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c855917c325c8415158a80388bd14e8f5e2cb917cf62b2fe0cd51e182d559fe7"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildClAsterizmReceiveRequestDto(uint64,uint256,uint64,uint256,uint256,bytes32,bytes).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#152) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildClAsterizmReceiveRequestDto(uint64,uint256,uint64,uint256,uint256,bytes32,bytes).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L152) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d1a0d360ed79d89ee4367b15a28ba226923fe9efe495fea0e5a53faeb61babd8"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildIzIninTransferRequestDto(uint64,uint256,uint256,bytes32,address,bool).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#105) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildIzIninTransferRequestDto(uint64,uint256,uint256,bytes32,address,bool).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L105) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d667a822f3b0a04ca963f09f6aa1e26c4d16e4d14e4e225c08f89b19c94f1923"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "AsterizmEnv._buildTrSendMessageRequestDto(uint256,uint64,uint256,uint256,bytes32,bool).dto (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#73) is a local variable never initialized\n",
            "markdown": "[AsterizmEnv._buildTrSendMessageRequestDto(uint256,uint64,uint256,uint256,bytes32,bool).dto](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L73) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "da29b594701c23b2ac2cb839d9a856f60140ff34b7be595bd8998d150942ba57"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1967UpgradeUpgradeable._upgradeToAndCall(address,bytes,bool) (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#65-70) ignores return value by AddressUpgradeable.functionDelegateCall(newImplementation,data) (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#68)\n",
            "markdown": "[ERC1967UpgradeUpgradeable._upgradeToAndCall(address,bytes,bool)](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L65-L70) ignores return value by [AddressUpgradeable.functionDelegateCall(newImplementation,data)](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42860747ee430169ebe44941c5f5703b4ed7e1700d12c6325df6e01cc1098885"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ERC1967UpgradeUpgradeable._upgradeBeaconToAndCall(address,bytes,bool) (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#156-162) ignores return value by AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(),data) (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#160)\n",
            "markdown": "[ERC1967UpgradeUpgradeable._upgradeBeaconToAndCall(address,bytes,bool)](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L156-L162) ignores return value by [AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(),data)](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 162
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c423961108a5471d1daa6ec2d2b17b49693d495a7795564d902bac72fb2cf0e3"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#62-66)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#85-92)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#99-108)\n",
            "markdown": "[MathUpgradeable.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L55-L134) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L62-L66)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L85-L92)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L99-L108)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23f0a4dff052b608ca5d744392131cef7f23e47e05a1276c3b0f804977fd0a35"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlotUpgradeable.getStringSlot(string) (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#112-117) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#114-116)\n",
            "markdown": "[StorageSlotUpgradeable.getStringSlot(string)](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L112-L117) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L114-L116)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "248ee2146a937b17f2f71e4bc182df9bcc123c234961fa241d36036771aa5158"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlotUpgradeable.getBytesSlot(bytes32) (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#122-127) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#124-126)\n",
            "markdown": "[StorageSlotUpgradeable.getBytesSlot(bytes32)](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L122-L127) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L124-L126)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 127
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "302c058b24a39163195c7249c0fe8201c7faa5e8166f990e639ff6c838f44487"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ERC721Upgradeable._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#404-426) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#418-420)\n",
            "markdown": "[ERC721Upgradeable._checkOnERC721Received(address,address,uint256,bytes)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L404-L426) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L418-L420)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol"
                },
                "region": {
                  "startLine": 404,
                  "endLine": 426
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "350842e0183af68ae0e1de345b0d07a281d08599ee572a36475f92fabe044d33"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "AddressUpgradeable._revert(bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#231-243) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#236-239)\n",
            "markdown": "[AddressUpgradeable._revert(bytes,string)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L231-L243) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L236-L239)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 231,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "41d98055557e70cfae51beb5c985f270243fa0aa616c6503eea9c0db2d35c447"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "AddressLib.isContract(address) (node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#30-39) uses assembly\n\t- INLINE ASM (node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#37)\n",
            "markdown": "[AddressLib.isContract(address)](node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#L30-L39) uses assembly\n\t- [INLINE ASM](node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#L37)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4a689688fbe93af260ede37a9e54e231fb4daedc6bd8d40840afcbfcc7b0abde"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlotUpgradeable.getUint256Slot(bytes32) (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#92-97) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#94-96)\n",
            "markdown": "[StorageSlotUpgradeable.getUint256Slot(bytes32)](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L92-L97) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L94-L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5ca9b16d05327470d4a8b540b14894d7f81fed0d5d5590c7c0b5d15362382010"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlotUpgradeable.getBytes32Slot(bytes32) (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#82-87) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#84-86)\n",
            "markdown": "[StorageSlotUpgradeable.getBytes32Slot(bytes32)](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L82-L87) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L84-L86)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6abd3378fe73e3b62ad53fe5bac46f63249e5e574ab269b09cad7f3aba40a3d0"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlotUpgradeable.getStringSlot(bytes32) (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#102-107) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#104-106)\n",
            "markdown": "[StorageSlotUpgradeable.getStringSlot(bytes32)](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L102-L107) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L104-L106)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7464d28395ea4089afc01c462d24d69361532a1835b59dfbad29ad9e6845d4be"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlotUpgradeable.getAddressSlot(bytes32) (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#62-67) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#64-66)\n",
            "markdown": "[StorageSlotUpgradeable.getAddressSlot(bytes32)](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L62-L67) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L64-L66)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a3c35353c2e7ef21037c8189986a54a7eceef2b92ba890f416f1b5f1794186cb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlotUpgradeable.getBytesSlot(bytes) (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#132-137) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#134-136)\n",
            "markdown": "[StorageSlotUpgradeable.getBytesSlot(bytes)](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L132-L137) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L134-L136)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aa520e2806480204e744488a3276ae5fe5a9f3f8f45094967e39c4828a46a1fa"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StringsUpgradeable.toString(uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#19-39) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#25-27)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#31-33)\n",
            "markdown": "[StringsUpgradeable.toString(uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#L19-L39) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#L25-L27)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#L31-L33)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cadd5d792980534cb36123087e31a382838f090b2ae740ca15a422392bb68164"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Address._revert(bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#231-243) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#236-239)\n",
            "markdown": "[Address._revert(bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L231-L243) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Address.sol#L236-L239)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 231,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d19576df04e54db180414187260180ffdb9985e84b4cac0842a3d9229fb61306"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "AddressLib.isContract(address) (contracts/libs/AddressLib.sol#30-39) uses assembly\n\t- INLINE ASM (contracts/libs/AddressLib.sol#37)\n",
            "markdown": "[AddressLib.isContract(address)](contracts/libs/AddressLib.sol#L30-L39) uses assembly\n\t- [INLINE ASM](contracts/libs/AddressLib.sol#L37)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/AddressLib.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e970902b26af6a4987df321ae48b631f8b2f5ab4c1f050b786f414be211dbb5d"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "StorageSlotUpgradeable.getBooleanSlot(bytes32) (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#72-77) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#74-76)\n",
            "markdown": "[StorageSlotUpgradeable.getBooleanSlot(bytes32)](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L72-L77) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L74-L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef915b945ed5640b5a8d4e9a0cac304dbcb7bdaea86b4da872fca8b93522fd35"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "Different versions of Solidity are used:\n\t- Version used: ['^0.8.0', '^0.8.1', '^0.8.17', '^0.8.19', '^0.8.2']\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#5)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)\n\t- ^0.8.1 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#4)\n\t- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#2)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#2)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#2)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/interfaces/IAsterizmEnv.sol#2)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/interfaces/IClientReceiverContract.sol#2)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/interfaces/IInitializerSender.sol#2)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#2)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#2)\n\t- ^0.8.17 (node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol#2)\n\t- ^0.8.17 (contracts/AsterizmInitializerV1.sol#2)\n\t- ^0.8.17 (contracts/AsterizmNonce.sol#2)\n\t- ^0.8.17 (contracts/AsterizmTranslatorV1.sol#2)\n\t- ^0.8.17 (contracts/base/AsterizmChainEnv.sol#2)\n\t- ^0.8.17 (contracts/base/AsterizmClient.sol#2)\n\t- ^0.8.17 (contracts/base/AsterizmEnv.sol#2)\n\t- ^0.8.17 (contracts/interfaces/IAsterizmEnv.sol#2)\n\t- ^0.8.17 (contracts/interfaces/IClientReceiverContract.sol#2)\n\t- ^0.8.17 (contracts/interfaces/IInitializerReceiver.sol#2)\n\t- ^0.8.17 (contracts/interfaces/IInitializerSender.sol#2)\n\t- ^0.8.17 (contracts/interfaces/IMultiChainToken.sol#2)\n\t- ^0.8.17 (contracts/interfaces/INonce.sol#2)\n\t- ^0.8.17 (contracts/interfaces/ITranslator.sol#2)\n\t- ^0.8.17 (contracts/libs/AddressLib.sol#2)\n\t- ^0.8.17 (contracts/libs/AsterizmHashLib.sol#2)\n\t- ^0.8.17 (contracts/libs/UintLib.sol#2)\n\t- ^0.8.17 (contracts/projects/checker/Checker.sol#2)\n\t- ^0.8.17 (contracts/projects/gas/GasStation.sol#2)\n\t- ^0.8.17 (contracts/projects/gas/GasStationUpgradeableV1.sol#2)\n\t- ^0.8.17 (contracts/projects/gas/base/GasStationValidator.sol#2)\n\t- ^0.8.17 (contracts/projects/gas/interfaces/IGasStationValidator.sol#2)\n\t- ^0.8.19 (contracts/DeGuardNFT.sol#2)\n\t- ^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#4)\n\t- ^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)\n",
            "markdown": "Different versions of Solidity are used:\n\t- Version used: ['^0.8.0', '^0.8.1', '^0.8.17', '^0.8.19', '^0.8.2']\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L5)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/access/Ownable.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Counters.sol#L4)\n\t- [^0.8.1](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L4)\n\t- [^0.8.1](node_modules/@openzeppelin/contracts/utils/Address.sol#L4)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L2)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L2)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L2)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/interfaces/IAsterizmEnv.sol#L2)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/interfaces/IClientReceiverContract.sol#L2)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/interfaces/IInitializerSender.sol#L2)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#L2)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#L2)\n\t- [^0.8.17](node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol#L2)\n\t- [^0.8.17](contracts/AsterizmInitializerV1.sol#L2)\n\t- [^0.8.17](contracts/AsterizmNonce.sol#L2)\n\t- [^0.8.17](contracts/AsterizmTranslatorV1.sol#L2)\n\t- [^0.8.17](contracts/base/AsterizmChainEnv.sol#L2)\n\t- [^0.8.17](contracts/base/AsterizmClient.sol#L2)\n\t- [^0.8.17](contracts/base/AsterizmEnv.sol#L2)\n\t- [^0.8.17](contracts/interfaces/IAsterizmEnv.sol#L2)\n\t- [^0.8.17](contracts/interfaces/IClientReceiverContract.sol#L2)\n\t- [^0.8.17](contracts/interfaces/IInitializerReceiver.sol#L2)\n\t- [^0.8.17](contracts/interfaces/IInitializerSender.sol#L2)\n\t- [^0.8.17](contracts/interfaces/IMultiChainToken.sol#L2)\n\t- [^0.8.17](contracts/interfaces/INonce.sol#L2)\n\t- [^0.8.17](contracts/interfaces/ITranslator.sol#L2)\n\t- [^0.8.17](contracts/libs/AddressLib.sol#L2)\n\t- [^0.8.17](contracts/libs/AsterizmHashLib.sol#L2)\n\t- [^0.8.17](contracts/libs/UintLib.sol#L2)\n\t- [^0.8.17](contracts/projects/checker/Checker.sol#L2)\n\t- [^0.8.17](contracts/projects/gas/GasStation.sol#L2)\n\t- [^0.8.17](contracts/projects/gas/GasStationUpgradeableV1.sol#L2)\n\t- [^0.8.17](contracts/projects/gas/base/GasStationValidator.sol#L2)\n\t- [^0.8.17](contracts/projects/gas/interfaces/IGasStationValidator.sol#L2)\n\t- [^0.8.19](contracts/DeGuardNFT.sol#L2)\n\t- [^0.8.2](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L4)\n\t- [^0.8.2](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5a25baeea3df3a4c91002e7407e659e0d07b51a10e360039aec09173e8fdf761"
          }
        },
        {
          "ruleId": "3-1-costly-loop",
          "message": {
            "text": "AsterizmClient._initAsterizmTransferEvent(uint64,bytes) (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#371-377) has costly operations inside a loop:\n\t- id = txId ++ (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#373)\n",
            "markdown": "[AsterizmClient._initAsterizmTransferEvent(uint64,bytes)](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L371-L377) has costly operations inside a loop:\n\t- [id = txId ++](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L373)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 371,
                  "endLine": 377
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a9abfdc19cdd52a695c862bf38bdbbf4e1797d609c2d8f6c3b091ef9c6342c9c"
          }
        },
        {
          "ruleId": "3-1-costly-loop",
          "message": {
            "text": "AsterizmClientUpgradeable._initAsterizmTransferEvent(uint64,bytes) (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#380-386) has costly operations inside a loop:\n\t- id = txId ++ (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#382)\n",
            "markdown": "[AsterizmClientUpgradeable._initAsterizmTransferEvent(uint64,bytes)](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L380-L386) has costly operations inside a loop:\n\t- [id = txId ++](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L382)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 380,
                  "endLine": 386
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ee3975a3816a6fc48942d8347ef93ca6393b5bde136fbb6bdcdd5e3a96575cbf"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "AsterizmEnv._buildIzRetryPayloadRequestDto(uint64,uint256,uint64,uint256,uint256,uint256,bool,bytes32,bytes) (contracts/base/AsterizmEnv.sol#188-204) is never used and should be removed\n",
            "markdown": "[AsterizmEnv._buildIzRetryPayloadRequestDto(uint64,uint256,uint64,uint256,uint256,uint256,bool,bytes32,bytes)](contracts/base/AsterizmEnv.sol#L188-L204) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ead5504a7baaf483946a7c0413e72b0c54f434f1e6acb4d6651fd76b56ee0ec"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "AsterizmClient._setUseForceOrder(bool) (contracts/base/AsterizmClient.sol#192-195) is never used and should be removed\n",
            "markdown": "[AsterizmClient._setUseForceOrder(bool)](contracts/base/AsterizmClient.sol#L192-L195) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 192,
                  "endLine": 195
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "79c1e2730e1d4d36a9fd1f0c8df908f4235cbe7e01e8fdeb15cd7fb1261843ea"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "AsterizmEnv._buildInternalClInitTransferRequestDto(uint64,uint256,uint256,bytes) (contracts/base/AsterizmEnv.sol#53-61) is never used and should be removed\n",
            "markdown": "[AsterizmEnv._buildInternalClInitTransferRequestDto(uint64,uint256,uint256,bytes)](contracts/base/AsterizmEnv.sol#L53-L61) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c483de043f64bcc7db18a49e17627bd1326ae1843b14412604b59979639db618"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "022011cc0b7a45b8d395af94b4390e5548143e5dd19cd6e198499d56a8300a4b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/base/AsterizmEnv.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/base/AsterizmEnv.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "053ae9be5a3213ef99c5abc753454d52ff94c536184ff95df9082bcfc279167b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/base/AsterizmEnv.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0d14b428c1b05cc786e623a8c38a1d6b80050c82b53c014c6b4f67f74b099056"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/interfaces/IAsterizmEnv.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/interfaces/IAsterizmEnv.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/interfaces/IAsterizmEnv.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "134c3ff70f77395a09922e00357f9561874431218e3a16b2a5059ab3087fedd0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "13dabe172ccfefdebf673e8746caddd1d47e6fb6b38a1d8376db205df0468d9d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Context.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21c670e40e414a2f849413afbbdb25adb81dae6585c4f38fc83730c17377e60f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23828c38e48eca1eb2feefa09c3bf8c127cd1b7096f4ea68de630fbc3ecc4e96"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23d009ae55d3dc7970cf9348bf9600063e1cbf3e7d577a160792483cdd4f3370"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/projects/gas/GasStationUpgradeableV1.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/projects/gas/GasStationUpgradeableV1.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "24a4e21a794a436399630d9a728c50938c829f19b63cf39c365ccc3b5f0007f6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/projects/gas/base/GasStationValidator.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/projects/gas/base/GasStationValidator.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b4228280609574404c56389b31de544fca313cce2f61b7d6d5fbe279f949ae7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c7efd54307eabb7ac3c63c6c2fb4704970b1d57998b2d3eeb1d0575e29be78f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e4ac6938f11ab8b26c16f705df041309ef9a97ae4ae992c298d6626e7660d19"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/IClientReceiverContract.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/IClientReceiverContract.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IClientReceiverContract.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "54230f7873822a5424633fa92ac547cd5901491776ee36bd5081a2b98bec8bba"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/projects/checker/Checker.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/projects/checker/Checker.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/checker/Checker.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55371e6dd25cbe21507619779d3f4cb38e681c9d9c89e8927a69a8a6659fce12"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.1](node_modules/@openzeppelin/contracts/utils/Address.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5906f1667ddb1546c744db1c5ec0714512ac2139194ac59714f6577a5008fe49"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "615ee5c49c08a2af7ff6237087e06f050cbbfc3f31ed920b7d2c0686d93ea3e7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/projects/gas/interfaces/IGasStationValidator.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/projects/gas/interfaces/IGasStationValidator.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/interfaces/IGasStationValidator.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "625a017b056c928aed95cf0076c73c4cc4e6c11fbc4acd3ac1d9333c870881f0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "64c7a36fb44f16abdac9a0a14b918bcae6b3a2d744ad2b65a81eddbec13cfd14"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "64edd5d94b02d1b587409d533b23ef5c0706ea6ae2f1ce9c638627895a6a8dd1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d114c59ea85387949d6af3be3b56fddf9270b41fc1f791370f48531eacddd36"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d4c82a228f1c75928707a7c7c466782528dac78ff9d62d41da8654b395d3d86"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/interfaces/IClientReceiverContract.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/interfaces/IClientReceiverContract.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/interfaces/IClientReceiverContract.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f44298760f040b8501e3c75fc13b57bdc64197f3c021f0b5f8c86052fc6217a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/interfaces/IInitializerSender.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/interfaces/IInitializerSender.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/interfaces/IInitializerSender.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "70cc49208205d4ebf8bf32b42422b1225d6e25c76604604175853062e50adb49"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7135ea7da5c9b037cc3722b1165bf49fce77c3f2d4011f992e242c91706a6424"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7277e7d31d0711b2943a70eb0f7e5651985e0d154d46218c3cd9963f745fe95b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/AsterizmInitializerV1.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/AsterizmInitializerV1.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "77cb3b40b654ce216b206d928d0cd314449d35e4bbe24fadc5b125d385fc1057"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/projects/gas/GasStation.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/projects/gas/GasStation.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b837d93ac6ba032f72cfebadc19aabe98c557d9028975e17e3c4e3ef5c2b2b7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/IInitializerSender.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/IInitializerSender.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IInitializerSender.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7cde118c2f82e7f3a8eab976a262354c5340cc783aa86d2bb17a474f96bf3b61"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/libs/AsterizmHashLib.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/libs/AsterizmHashLib.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/AsterizmHashLib.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7dbcc01a70472d382c70bd061c0bfc76b07ddfe173d6c86096c49ebd59ff9c4b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Counters.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Counters.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "833c66ce7f52d0f775c7a2eefef742d581ed1692ac758436e22f77ceeb7c72be"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "84aee6e14cdf4d0328d9684f3e416cd13d89c3c831e0d11ca40e6b12080c54ad"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "851a3cc70cf5a0e84cea60ba82f675bc668a61dfc08f0b82199206a5fbafb3b4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#5) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol#L5) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8bebd94044b4fc23c3a072b0f2c3317bb6194a929a038105f2c2401a68922142"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e9567d9c03d8bf74a7e8933481aec1883e1aa76e6c7f000d11b859a7b61c43a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/AsterizmNonce.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/AsterizmNonce.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9622a8ce3d7898209a37ecc691ad60490e476ef9d0b0da6c159961c07e770f16"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9ece5656f94ef6e17af9dd7b85e5a252a637b90dbef27eb9ce1fb80193470cdc"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a463da445d053511148115edbe546c655bdc4a5fd436a3ff53e952d31c6fe58b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/libs/AddressLib.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/libs/AddressLib.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/AddressLib.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a52079419bfbacad335e840e1e29c28915734bec27ebe7b709c610109028b31d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a5561b74dd2618c8760c9384c983ae3401b2722f0cc13876d420f863b901d007"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a77ba305c9adf51154f450582fdecd63f0dca86c723e5ac5c415dd507b636db8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/libs/UintLib.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/libs/UintLib.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/libs/UintLib.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aa85f6cf131cd9f9def2938eadd8b8d3d5acf8441837ac7b15bf07872fa9cc6f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/base/AsterizmChainEnv.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/base/AsterizmChainEnv.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmChainEnv.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b0996b80dd94162af979882fd85d4fb7d8479a5349d3c3778eb9ab89462b4635"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/IAsterizmEnv.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/IAsterizmEnv.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IAsterizmEnv.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b0bc0ea352d83120ef8eec1989dfac9b9a295a85ec9828626d8d8b81c7b807d5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/INonce.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/INonce.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/INonce.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3341bbcd658f98a8b401654de08ab7120bc3bf994b1d525ff539f1fd8074e71"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b413632122f633f7f88592c125e6d7017447029931af2cc35f0098e38a32ca80"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.2](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bed54dbe2e51e18eb2db3f1fd7f0692b59da90f7a501ea1e66ce631efed867d6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/AsterizmTranslatorV1.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/AsterizmTranslatorV1.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bf74f1021860a044563bfbf2ad33c24ed012b675bff7240deee3136a0a76b9d8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/ITranslator.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/ITranslator.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/ITranslator.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c428ac5a2027a806869af3c62f915394241457087d440ba741757b677c865cbb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c497181c2a27769a61bd60331b91c2af796d99fa43e3f6f1348a7299aa84aa02"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd1cb64cfc2226dd5a3bed43bb14bb1746f42b97374215eae0f7f76616f31d75"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd53c33d66bd8480a51745c8b8bf003209d379a510e63fbc01ab00e335da83a2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.19 (contracts/DeGuardNFT.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n",
            "markdown": "Pragma version[^0.8.19](contracts/DeGuardNFT.sol#L2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cf96f0abcaeebd7eb48d1a2b93bb0df6f50192ab884c1fa229acc65869c38c6e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/access/Ownable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/Ownable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d9fcf15f6c48db746fe8b4b5b79cadf5dc4cde499aed490b6b22d0f93b6cdddd"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/IMultiChainToken.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/IMultiChainToken.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IMultiChainToken.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dcbce1f2b29af7a2e577ac05f0d28bdbc85bf21e480e64b16119ee011b6cfc76"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.2](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "df5db7d467cb71fbad3cca7cef629a11b02bc8f14a74db90d7ac2cecf9dc0da6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e1313d4d68e68b7ab0c30b06f07a3c26a73aa555c852d83085417f16c85c14c3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.1 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.1](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e64ad37105cb312bce8c4abfb13684ee0f969472b655be82bca640b480c86acb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9c47fcdfa1d3ae1113c3ae2b3abd8022f7bce094dee282d48600fcba3bc4006"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ee6a4d36dddbec5c0e74f0b57061e3562cf18facb05baaf6981bf282bf555170"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ee8ec17b876e2e765b7af6305409fdb36d9d988dffec6a7d52799df85d57bbd3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/base/AsterizmClient.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/base/AsterizmClient.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f4bceabc7ae179bc7ecf9fcd27d5bc8dcbe0cc9ae42af65641910d47a5e8b6ae"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f772c43bdbdc407181007d6f126b31ace54e50d8414c7616906a3e7c6d9c1fcc"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.17 (contracts/interfaces/IInitializerReceiver.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.17](contracts/interfaces/IInitializerReceiver.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/interfaces/IInitializerReceiver.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fc1eeefcc2b6e12e57e9b276f294616e3968104914a4f8763a3380fc52006130"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-137):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n",
            "markdown": "Low level call in [Address.functionCallWithValue(address,bytes,uint256,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L128-L137):\n\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "10cd8f95ab7ad0b059f194e1c0cac49d10c8b803e18fc565e3988b610838588e"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AsterizmTranslatorV1.resendMessage(bytes32,uint256) (contracts/AsterizmTranslatorV1.sol#225-232):\n\t- (success) = owner().call{value: msg.value}() (contracts/AsterizmTranslatorV1.sol#227)\n",
            "markdown": "Low level call in [AsterizmTranslatorV1.resendMessage(bytes32,uint256)](contracts/AsterizmTranslatorV1.sol#L225-L232):\n\t- [(success) = owner().call{value: msg.value}()](contracts/AsterizmTranslatorV1.sol#L227)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 232
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f74fde06f2422ca467938962f937527ebdbc4261e2f8af30bfc3b31db67f0c1"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in SafeERC20._callOptionalReturnBool(IERC20,bytes) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#134-142):\n\t- (success,returndata) = address(token).call(data) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#139)\n",
            "markdown": "Low level call in [SafeERC20._callOptionalReturnBool(IERC20,bytes)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L134-L142):\n\t- [(success,returndata) = address(token).call(data)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L139)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21157b1f5698228f61fadeffa547fd0639a58fa52c7a8a1524088912582d3c71"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in DeGuardNFT.withdraw() (contracts/DeGuardNFT.sol#265-270):\n\t- (success) = address(msg.sender).call{value: address(this).balance}() (contracts/DeGuardNFT.sol#266-268)\n",
            "markdown": "Low level call in [DeGuardNFT.withdraw()](contracts/DeGuardNFT.sol#L265-L270):\n\t- [(success) = address(msg.sender).call{value: address(this).balance}()](contracts/DeGuardNFT.sol#L266-L268)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 265,
                  "endLine": 270
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "238a5fca3cb660472d417c8a7e3efb369db03712d3168bf52587c48ae17e4dfd"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in GasStatioValidator.addStableCoin(address) (contracts/projects/gas/base/GasStationValidator.sol#36-44):\n\t- (success,result) = _tokenAddress.call(abi.encodeWithSignature(decimals())) (contracts/projects/gas/base/GasStationValidator.sol#37)\n",
            "markdown": "Low level call in [GasStatioValidator.addStableCoin(address)](contracts/projects/gas/base/GasStationValidator.sol#L36-L44):\n\t- [(success,result) = _tokenAddress.call(abi.encodeWithSignature(decimals()))](contracts/projects/gas/base/GasStationValidator.sol#L37)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "407867d625c0b735e21c06186ac430b73f2dede0e5ba8446e8baaa2c988adb1a"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AddressUpgradeable.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#180-187):\n\t- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#185)\n",
            "markdown": "Low level call in [AddressUpgradeable.functionDelegateCall(address,bytes,string)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L180-L187):\n\t- [(success,returndata) = target.delegatecall(data)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L185)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 187
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4404c4f4c6ba2e7168eba016d20297521a807e8e2039898f140256ff429b8312"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AsterizmTranslatorV1.sendMessage(IAsterizmEnv.TrSendMessageRequestDto) (contracts/AsterizmTranslatorV1.sol#201-220):\n\t- (success) = owner().call{value: msg.value}() (contracts/AsterizmTranslatorV1.sol#204)\n",
            "markdown": "Low level call in [AsterizmTranslatorV1.sendMessage(IAsterizmEnv.TrSendMessageRequestDto)](contracts/AsterizmTranslatorV1.sol#L201-L220):\n\t- [(success) = owner().call{value: msg.value}()](contracts/AsterizmTranslatorV1.sol#L204)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 220
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "48b001e82bf2c40667a8c1640e149d6585cb3e859342eb60670191b5a5745edd"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#64-69):\n\t- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#67)\n",
            "markdown": "Low level call in [Address.sendValue(address,uint256)](node_modules/@openzeppelin/contracts/utils/Address.sol#L64-L69):\n\t- [(success) = recipient.call{value: amount}()](node_modules/@openzeppelin/contracts/utils/Address.sol#L67)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59acad15d5ec3ce967b134d5b4a033e11baba8858da8428b5572845387973449"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in GasStationUpgradeableV1._asterizmReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto) (contracts/projects/gas/GasStationUpgradeableV1.sol#149-168):\n\t- (success) = dstAddress.call{value: amountToSend}() (contracts/projects/gas/GasStationUpgradeableV1.sol#163)\n",
            "markdown": "Low level call in [GasStationUpgradeableV1._asterizmReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto)](contracts/projects/gas/GasStationUpgradeableV1.sol#L149-L168):\n\t- [(success) = dstAddress.call{value: amountToSend}()](contracts/projects/gas/GasStationUpgradeableV1.sol#L163)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 168
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7aed36c38865ef5c608ffc03c7b75090bf95707917ec83827e3ddd5f806cd256"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in GasStationUpgradeableV1.addStableCoin(address) (contracts/projects/gas/GasStationUpgradeableV1.sol#57-65):\n\t- (success,result) = _tokenAddress.call(abi.encodeWithSignature(decimals())) (contracts/projects/gas/GasStationUpgradeableV1.sol#58)\n",
            "markdown": "Low level call in [GasStationUpgradeableV1.addStableCoin(address)](contracts/projects/gas/GasStationUpgradeableV1.sol#L57-L65):\n\t- [(success,result) = _tokenAddress.call(abi.encodeWithSignature(decimals()))](contracts/projects/gas/GasStationUpgradeableV1.sol#L58)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a9a9d343bc7314bacc65cc60f037bb4aabd9e88f8b25738d99f6bef82fa530de"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#128-137):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)\n",
            "markdown": "Low level call in [AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L128-L137):\n\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L135)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b055de1f0e32261bfc94f8376eed86e29658d2f588ddd1134abed80e6d35fadf"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AsterizmTranslatorV1.withdraw(address,uint256) (contracts/AsterizmTranslatorV1.sol#120-125):\n\t- (success) = _target.call{value: _amount}() (contracts/AsterizmTranslatorV1.sol#122)\n",
            "markdown": "Low level call in [AsterizmTranslatorV1.withdraw(address,uint256)](contracts/AsterizmTranslatorV1.sol#L120-L125):\n\t- [(success) = _target.call{value: _amount}()](contracts/AsterizmTranslatorV1.sol#L122)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 125
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b64b56fb0843970b18a7a67d022b7d47b79b0ec0fa1ce55c0c8e88f2d2be566b"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#155-162):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#160)\n",
            "markdown": "Low level call in [AddressUpgradeable.functionStaticCall(address,bytes,string)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L155-L162):\n\t- [(success,returndata) = target.staticcall(data)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 162
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "baa83774a2040bdc437f652779408968735ec53303d22392bc04bbabb86294e7"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in GasStation.addStableCoin(address) (contracts/projects/gas/GasStation.sol#91-99):\n\t- (success,result) = _tokenAddress.call(abi.encodeWithSignature(decimals())) (contracts/projects/gas/GasStation.sol#92)\n",
            "markdown": "Low level call in [GasStation.addStableCoin(address)](contracts/projects/gas/GasStation.sol#L91-L99):\n\t- [(success,result) = _tokenAddress.call(abi.encodeWithSignature(decimals()))](contracts/projects/gas/GasStation.sol#L92)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 99
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bed2e56e570da4b73c342acf0b22a1bd4af53e336ad80d02f8ba93310f988250"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in GasStationUpgradeableV1.withdrawCoins(address,uint256) (contracts/projects/gas/GasStationUpgradeableV1.sol#48-53):\n\t- (success) = _target.call{value: _amount}() (contracts/projects/gas/GasStationUpgradeableV1.sol#50)\n",
            "markdown": "Low level call in [GasStationUpgradeableV1.withdrawCoins(address,uint256)](contracts/projects/gas/GasStationUpgradeableV1.sol#L48-L53):\n\t- [(success) = _target.call{value: _amount}()](contracts/projects/gas/GasStationUpgradeableV1.sol#L50)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d3bc04f2075eaaefc6985378ff0f47da721a0b842a12e2c2e35f46dbd089d55f"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in GasStation._asterizmReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto) (contracts/projects/gas/GasStation.sol#184-203):\n\t- (success) = dstAddress.call{value: amountToSend}() (contracts/projects/gas/GasStation.sol#198)\n",
            "markdown": "Low level call in [GasStation._asterizmReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto)](contracts/projects/gas/GasStation.sol#L184-L203):\n\t- [(success) = dstAddress.call{value: amountToSend}()](contracts/projects/gas/GasStation.sol#L198)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 203
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ddb2f04b20ae433dd110045ca353f71a082e1c3dbe4c9b46e42c8f642e09b6fe"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#155-162):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#160)\n",
            "markdown": "Low level call in [Address.functionStaticCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L155-L162):\n\t- [(success,returndata) = target.staticcall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 162
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e3ee17b8fef34f7aa5d6702465607b39fa84c0a41805016249d2bb597f804e20"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#180-187):\n\t- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#185)\n",
            "markdown": "Low level call in [Address.functionDelegateCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L180-L187):\n\t- [(success,returndata) = target.delegatecall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L185)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 187
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb55d26dc37115ebf2c001e147fef74bea1ee1fcd18fcde4ae8d16988e732b54"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in GasStation.withdrawCoins(address,uint256) (contracts/projects/gas/GasStation.sol#47-52):\n\t- (success) = _target.call{value: _amount}() (contracts/projects/gas/GasStation.sol#49)\n",
            "markdown": "Low level call in [GasStation.withdrawCoins(address,uint256)](contracts/projects/gas/GasStation.sol#L47-L52):\n\t- [(success) = _target.call{value: _amount}()](contracts/projects/gas/GasStation.sol#L49)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ed5e8f2586163cdf3cd457dedf1cd7dbbdab9882e517020b09e4a530e7c581c9"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in AddressUpgradeable.sendValue(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#64-69):\n\t- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#67)\n",
            "markdown": "Low level call in [AddressUpgradeable.sendValue(address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L64-L69):\n\t- [(success) = recipient.call{value: amount}()](node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#L67)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef14535be070facbcddf130199fb1c430fee2cd1cb8e03a87a4d1acdbb419e17"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function AsterizmChainEnv.__AsterizmChainEnv_init() (contracts/base/AsterizmChainEnv.sol#18-21) is not in mixedCase\n",
            "markdown": "Function [AsterizmChainEnv.__AsterizmChainEnv_init()](contracts/base/AsterizmChainEnv.sol#L18-L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmChainEnv.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "00081fedcc463ace8c59d3061878f68c6d9cc5fd94276b88075820f955bb1eff"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.addPlan(uint256,uint256,uint256)._id (contracts/DeGuardNFT.sol#207) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.addPlan(uint256,uint256,uint256)._id](contracts/DeGuardNFT.sol#L207) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 207,
                  "endLine": 207
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "003869dc3c5f4a0f5b0d349d23a65f68e872cc42266202bb4146f0bd9c70d670"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.removeStableCoin(address)._tokenAddress (contracts/projects/gas/GasStationUpgradeableV1.sol#69) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.removeStableCoin(address)._tokenAddress](contracts/projects/gas/GasStationUpgradeableV1.sol#L69) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "034ec759882378a9b55076bd1bed689f103cc5eaadeb41d3b6a5e1013280f419"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._payload (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#450) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._payload](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L450) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 450,
                  "endLine": 450
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "041b510ea9ce533a3946db516042a14af37945d28a19b391e98b6818c351190b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._transferHash (contracts/base/AsterizmClient.sol#383) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._transferHash](contracts/base/AsterizmClient.sol#L383) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 383,
                  "endLine": 383
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "06d5996a02a6d2e14dbadcc7a4cc7e481e39c34b625354860c3a6f28952e9198"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Checker.sendCheck(uint64[])._dstChainIds (contracts/projects/checker/Checker.sol#19) is not in mixedCase\n",
            "markdown": "Parameter [Checker.sendCheck(uint64[])._dstChainIds](contracts/projects/checker/Checker.sol#L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/checker/Checker.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "09295c845192519b5218637e64ecb61bbf7daab4c8980cf918f961e3302911da"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.updateRate(uint256)._value (contracts/DeGuardNFT.sol#174) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.updateRate(uint256)._value](contracts/DeGuardNFT.sol#L174) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 174,
                  "endLine": 174
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "098a78c0ea6287c5cf7c006785d1af6b1ac29786cff894fe85ac31e331101491"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.__AsterizmClientUpgradeable_init(IInitializerSender,bool,bool)._disableHashValidation (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#112) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.__AsterizmClientUpgradeable_init(IInitializerSender,bool,bool)._disableHashValidation](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L112) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "09cdb74aba52e002b84d4e11beaaf5d4c4af354598fee4825ac42626cc29a19c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmIzReceive(IAsterizmEnv.IzAsterizmReceiveRequestDto)._dto (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#429) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmIzReceive(IAsterizmEnv.IzAsterizmReceiveRequestDto)._dto](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L429) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 429,
                  "endLine": 429
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0a461482d0ab8219bc8e6cfa64f754e6632cfdbef60e2d758302f71521880d18"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.addTrustedAddresses(uint64[],uint256[])._trustedAddresses (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#296) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.addTrustedAddresses(uint64[],uint256[])._trustedAddresses](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L296) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c83a69b6d696e1ed37dfe46e559f50bd2d2f52e9e31b6b3d2e23138f72c154c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.removeBlockAddress(uint64,uint256)._chainId (contracts/AsterizmInitializerV1.sol#134) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.removeBlockAddress(uint64,uint256)._chainId](contracts/AsterizmInitializerV1.sol#L134) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0da2ab1c574eaf09592d2e4edf8e225699dc2ceb7330bf4d453cc033420c402b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.buyPlan(uint256,uint64,address,bool)._plan (contracts/DeGuardNFT.sol#183) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.buyPlan(uint256,uint64,address,bool)._plan](contracts/DeGuardNFT.sol#L183) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f0d9c670dfdc5f4a64b8b3171d1d7d87433ac98f884b36b57e773eb3a319a8b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.getNonce(uint64,bytes)._pathData (contracts/AsterizmNonce.sol#68) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.getNonce(uint64,bytes)._pathData](contracts/AsterizmNonce.sol#L68) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "118944693f4242b69cdd66a0ab0456e681ea2deb6dbb1383d5ac4115630578b0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.buyPlan(uint256,uint64,address,bool)._crosschain (contracts/DeGuardNFT.sol#183) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.buyPlan(uint256,uint64,address,bool)._crosschain](contracts/DeGuardNFT.sol#L183) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15bb36f39dfa54ef38a3e76a4cf2a9c7a588f61dfc6a84ef3d95592a23b0be06"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.initAsterizmTransfer(uint64,uint256,bytes32)._txId (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#393) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.initAsterizmTransfer(uint64,uint256,bytes32)._txId](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L393) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 393
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15ea72126db86953aa66fafc83ea7ee24bf6b5169dc7c6798931ca0c34bb87c4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.withdrawTokens(IERC20,address,uint256)._amount (contracts/projects/gas/GasStation.sol#58) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.withdrawTokens(IERC20,address,uint256)._amount](contracts/projects/gas/GasStation.sol#L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "174d3931ae307526321205bc5936ba5d39d983bf478c1645ee8eddda37cd4b5d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.sendGas(uint64[],uint256[],uint256[],IERC20)._chainIds (contracts/projects/gas/GasStationUpgradeableV1.sol#107) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.sendGas(uint64[],uint256[],uint256[],IERC20)._chainIds](contracts/projects/gas/GasStationUpgradeableV1.sol#L107) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "189c465a73b4bb06c04019926b932864accbfabe99bf192b81ee2476388c1c9b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter UintLib.toAddress(uint256)._val (node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [UintLib.toAddress(uint256)._val](node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/UintLib.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1996552c40d08292aa4efcb63380e5f4f25749eb6678906d9bf0f69480c17a48"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.setMinUsdAmountPerChain(uint256)._amount (contracts/projects/gas/GasStationUpgradeableV1.sol#90) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.setMinUsdAmountPerChain(uint256)._amount](contracts/projects/gas/GasStationUpgradeableV1.sol#L90) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "19d834e5cb48c4d375a336f088fe9d8918ee6a15fc03a0e9b74b1d1fa5dc0fc3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.addChains(uint64[],uint8[])._chainIds (contracts/AsterizmTranslatorV1.sol#161) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.addChains(uint64[],uint8[])._chainIds](contracts/AsterizmTranslatorV1.sol#L161) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1b133a2b26914d9b6797f6816dc09af0bef26d93a718ecc0168ac170bb6ea733"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.sendGas(uint64[],uint256[],uint256[],IERC20)._amounts (contracts/projects/gas/GasStationUpgradeableV1.sol#107) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.sendGas(uint64[],uint256[],uint256[],IERC20)._amounts](contracts/projects/gas/GasStationUpgradeableV1.sol#L107) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1b898a5181c878409c5ff4f793924058295f48e29193a5fc08a1d40eded5f1e6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.getNonce(uint64,bytes)._chainId (contracts/AsterizmNonce.sol#68) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.getNonce(uint64,bytes)._chainId](contracts/AsterizmNonce.sol#L68) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f1f1bec0569d8abd7104422ecdd20865ac1820a9b6d525dfdfa0d25f2d16384"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStatioValidator.calcSendingAmount(uint256[],IERC20)._amounts (contracts/projects/gas/base/GasStationValidator.sol#90) is not in mixedCase\n",
            "markdown": "Parameter [GasStatioValidator.calcSendingAmount(uint256[],IERC20)._amounts](contracts/projects/gas/base/GasStationValidator.sol#L90) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1fe9456feb1fcaf23c61b3ad2f4abbeb85e3b1f56596eb99f875ffa26ab238bf"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.getTrustedAddresses(uint64)._chainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#349) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.getTrustedAddresses(uint64)._chainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L349) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 349,
                  "endLine": 349
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2091297549f8ddc88622deef2d963b98a07c852e3d71d76fd18c41afadef1925"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.setMaxUsdAmountPerChain(uint256)._amount (contracts/projects/gas/GasStation.sol#131) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.setMaxUsdAmountPerChain(uint256)._amount](contracts/projects/gas/GasStation.sol#L131) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 131,
                  "endLine": 131
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2091e6ae3508026d66c9db111f6508c6c61535bdcbaa05d29066dac4eb3d86a2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.increaseNonceWithValidation(uint64,bytes,uint256)._nonce (contracts/AsterizmNonce.sol#58) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.increaseNonceWithValidation(uint64,bytes,uint256)._nonce](contracts/AsterizmNonce.sol#L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "212231cf36790e829292c1e53662c96ed5c8d086fc2346fc38e113ed27ec58b3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)._receivers (contracts/projects/gas/GasStation.sol#141) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)._receivers](contracts/projects/gas/GasStation.sol#L141) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21517ba5d63ea66ea1dbe3e0ced753d4948bb9358c414579fc5f8707b4167ad9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.crossChainTransfer(uint64,address,address,uint256)._tokenId (contracts/DeGuardNFT.sol#276) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.crossChainTransfer(uint64,address,address,uint256)._tokenId](contracts/DeGuardNFT.sol#L276) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23f1ddca27e0c92113e8bf87fa876c93fc78049570b0fd3bb85b3b2f731b3fc1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.getRange(address,uint256)._owner (contracts/DeGuardNFT.sol#145) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.getRange(address,uint256)._owner](contracts/DeGuardNFT.sol#L145) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "24cd3aa092eeed128c3c69081e91601a50d78747a0e8a74d1329cd9312a79879"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.setMaxUsdAmount(uint256)._amount (contracts/projects/gas/GasStation.sol#117) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.setMaxUsdAmount(uint256)._amount](contracts/projects/gas/GasStation.sol#L117) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "25e072c050d3e03498d255af337c25819ccd82d38ef4f03a5d1722f1fe451b90"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.addChain(uint64,uint8)._chainId (contracts/AsterizmTranslatorV1.sol#151) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.addChain(uint64,uint8)._chainId](contracts/AsterizmTranslatorV1.sol#L151) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "25fdcc196d26450441706db70f51695faa919d8a5be3fa56e705aa30ef631804"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._nonce (contracts/base/AsterizmClient.sol#383) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._nonce](contracts/base/AsterizmClient.sol#L383) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 383,
                  "endLine": 383
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "26ede7456b6f7deb3adc17cba735f65a3ee23899e75b3c9f496c00e26598fca6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmIzReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto)._dto (contracts/base/AsterizmClient.sol#361) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmIzReceive(IAsterizmEnv.ClAsterizmReceiveRequestDto)._dto](contracts/base/AsterizmClient.sol#L361) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 361,
                  "endLine": 361
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "271f17e3f8aa2a1f584b4ddbf56eac75fde5db30c128285f8cea57cb5802995a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.addRelayer(address)._relayer (contracts/AsterizmTranslatorV1.sol#129) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.addRelayer(address)._relayer](contracts/AsterizmTranslatorV1.sol#L129) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2880f89ffbf40d89069d024c312fd197dedd5e282d9e125946b189b4766992a7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.crossChainTransfer(uint64,address,address,uint256)._dstChainId (contracts/DeGuardNFT.sol#276) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.crossChainTransfer(uint64,address,address,uint256)._dstChainId](contracts/DeGuardNFT.sol#L276) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "28e942968d8ada3f3acc3e2a532804e49483f3fe52cd169e3bd605a2d854ca01"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC1967UpgradeUpgradeable.__ERC1967Upgrade_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#23-24) is not in mixedCase\n",
            "markdown": "Function [ERC1967UpgradeUpgradeable.__ERC1967Upgrade_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L23-L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "29c5a9e0594a34ab55098292b0786be5a1f49f1e651ab7af2a669ca40aceb7cb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.removeSender(address)._sender (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#276) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.removeSender(address)._sender](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L276) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b4ca728a5ec28b8cb3c75d68a7dfd09aa28534500e33efb023d03b0657c5204"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.safeMint(address,uint256,uint256,uint256)._endTime (contracts/DeGuardNFT.sol#104) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.safeMint(address,uint256,uint256,uint256)._endTime](contracts/DeGuardNFT.sol#L104) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c7749716db8417d6350c5433e83ea343955ce186fb2f8ae8748f17f21da147c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.addTrustedAddress(uint64,uint256)._chainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#276) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.addTrustedAddress(uint64,uint256)._chainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L276) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2d5b5f709d5c3b1fbcca96a9d8e9c8e9050948c48610be1e51cb8ba5013eb4c9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.withdrawNotExistsTokens(IERC20,address,uint256)._amount (contracts/projects/gas/GasStation.sol#75) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.withdrawNotExistsTokens(IERC20,address,uint256)._amount](contracts/projects/gas/GasStation.sol#L75) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f816f922d614db9f5a4ab1ce1965c1c5eee337b534a6f75974e20321b37b6f1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)._amounts (contracts/projects/gas/GasStation.sol#141) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)._amounts](contracts/projects/gas/GasStation.sol#L141) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "30e8e982f3f64ac06ce44410cf8e81f6c0c766a2e393e60872daf4770253a173"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ContextUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#36) is not in mixedCase\n",
            "markdown": "Variable [ContextUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "36b0d7790b5ec0201a99f98a2f3b1afbd4248739c34889d0a9d08876f3462218"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32,bytes)._payload (contracts/base/AsterizmClient.sol#325) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32,bytes)._payload](contracts/base/AsterizmClient.sol#L325) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "36d484c195e55a842ff1d0480d35864a82ccecd80d6fb7675349cab833c9e8d8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.setTransalor(ITranslator)._translatorLib (contracts/AsterizmInitializerV1.sol#104) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.setTransalor(ITranslator)._translatorLib](contracts/AsterizmInitializerV1.sol#L104) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "370e7bd0fd5e9c85cb17462bfed842dda176f71e167c8eba85ec3e6bb9621faa"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.withdrawTokens(IERC20,address,uint256)._token (contracts/projects/gas/GasStation.sol#58) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.withdrawTokens(IERC20,address,uint256)._token](contracts/projects/gas/GasStation.sol#L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3ce231d53a950695bc64639a780f85f155882eefa31136d695352c63c476422b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#44-46) is not in mixedCase\n",
            "markdown": "Function [ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#L44-L46) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e75801ad9978e638414efcd60e7f0073b008a621502b3366b5fb8e7ac736ea4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.addBlockAddress(uint64,uint256)._address (contracts/AsterizmInitializerV1.sol#126) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.addBlockAddress(uint64,uint256)._address](contracts/AsterizmInitializerV1.sol#L126) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e82af3a32fe47723fd7b9bcbd87205d628fb4748d3bbbdc028480123322390f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.receivePayload(IAsterizmEnv.IzReceivePayloadRequestDto)._dto (contracts/AsterizmInitializerV1.sol#183) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.receivePayload(IAsterizmEnv.IzReceivePayloadRequestDto)._dto](contracts/AsterizmInitializerV1.sol#L183) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44ba84cf9797dbfd3c20d9efad043b1cdd36bb37d0f29ffc2af7d4cece352cb7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32,bytes)._txId (contracts/base/AsterizmClient.sol#325) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32,bytes)._txId](contracts/base/AsterizmClient.sol#L325) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44d346df21c0e3e73b550780885d901f303bb2184ec730f35e889c0a2bcda39e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.setOutBoundNonce(INonce)._nonce (contracts/AsterizmInitializerV1.sol#111) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.setOutBoundNonce(INonce)._nonce](contracts/AsterizmInitializerV1.sol#L111) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4512071ffd3b6fab8874f8b5663b797d16c74a77d4814c518a615065141c130d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC721Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#477) is not in mixedCase\n",
            "markdown": "Variable [ERC721Upgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L477) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol"
                },
                "region": {
                  "startLine": 477,
                  "endLine": 477
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "45bb081af2c9507ece8478bb7d5a5f54ed9d0c2ce3c2cb1c7871fb53653ea52e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.removeRelayer(address)._relayer (contracts/AsterizmTranslatorV1.sol#136) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.removeRelayer(address)._relayer](contracts/AsterizmTranslatorV1.sol#L136) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "47423f58548129299178ee14d9b81896b9c811aba69a979f516bdd9d473d00c1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.initialize(ITranslator)._translatorLibrary (contracts/AsterizmInitializerV1.sol#73) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.initialize(ITranslator)._translatorLibrary](contracts/AsterizmInitializerV1.sol#L73) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "48f00128a4b6f40eadaf8272005ba5cb1f34437ecd4173d878a940a9bc87173d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.resendMessage(bytes32,uint256)._senderAddress (contracts/AsterizmTranslatorV1.sol#225) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.resendMessage(bytes32,uint256)._senderAddress](contracts/AsterizmTranslatorV1.sol#L225) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "49a91ece3fe0b19136e25161851c9991bae3b6ea16d8f9dfa1234c106068b04d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.resendMessage(bytes32,uint256)._transferHash (contracts/AsterizmTranslatorV1.sol#225) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.resendMessage(bytes32,uint256)._transferHash](contracts/AsterizmTranslatorV1.sol#L225) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4b26d74ab8b46dddec1816e6693398c2d428896a65567f9c4da0c6aae961606f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.addBlockAddress(uint64,uint256)._chainId (contracts/AsterizmInitializerV1.sol#126) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.addBlockAddress(uint64,uint256)._chainId](contracts/AsterizmInitializerV1.sol#L126) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4b548fe253c6974b4a819bcd18c0d275e82f0898aacdeb16294dd1b2c1a3c971"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.initTransfer(IAsterizmEnv.IzIninTransferRequestDto)._dto (contracts/AsterizmInitializerV1.sol#163) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.initTransfer(IAsterizmEnv.IzIninTransferRequestDto)._dto](contracts/AsterizmInitializerV1.sol#L163) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 163,
                  "endLine": 163
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4bfafbe1f564426556f7fe0b99e36dafaca4d61f1930a5ca97336bd84c254a5e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.addPlan(uint256,uint256,uint256)._priceInUSD (contracts/DeGuardNFT.sol#208) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.addPlan(uint256,uint256,uint256)._priceInUSD](contracts/DeGuardNFT.sol#L208) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 208
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4cc6b59d89d293559a79a944f71a639234bffa73f0dd4c6b135e13f07b16fb5d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.addSender(address)._sender (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#260) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.addSender(address)._sender](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L260) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 260,
                  "endLine": 260
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e2a48034d51ef7590227a667508d495680bb1e2ff286784c19caa7e1a254f63"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.removeTrustedAddress(uint64)._chainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#304) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.removeTrustedAddress(uint64)._chainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L304) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 304,
                  "endLine": 304
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ea3eab99f0c24ad81d044afd86d4fbd011698b9db17555b983af9197dcd2357"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.transferSendingResultNotification(bytes32,uint8)._statusCode (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#428) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.transferSendingResultNotification(bytes32,uint8)._statusCode](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L428) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 428
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5055393e6e3d2984e61b24721bd8f9794271971dbc5becd0b6b9bf52958e3832"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.transferSendingResultNotification(bytes32,uint8)._statusCode (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#419) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.transferSendingResultNotification(bytes32,uint8)._statusCode](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L419) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 419,
                  "endLine": 419
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "51d09e3288a7bd8fa2cdb4c752be1cd0df36717f2b7c7cb2c423cd2d4afbe4ed"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.getNonceBase(uint64,uint256,uint256)._chainId (contracts/AsterizmNonce.sol#76) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.getNonceBase(uint64,uint256,uint256)._chainId](contracts/AsterizmNonce.sol#L76) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "52a63cd612d9668bbee5aa0cecdd381b6a79088b806c8844d349f9c75ec33e7e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.forceSetNonce(uint64,bytes,uint256)._chainId (contracts/AsterizmNonce.sol#84) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.forceSetNonce(uint64,bytes,uint256)._chainId](contracts/AsterizmNonce.sol#L84) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "52df8f9109825303e39fb8680643b875429de69d53ee421f65218d532a4c8ca5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.withdraw(address,uint256)._target (contracts/AsterizmTranslatorV1.sol#120) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.withdraw(address,uint256)._target](contracts/AsterizmTranslatorV1.sol#L120) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "548b3551809edf5d7efcbd797b806fe45b9efb431b94256efc7bfef30d0e1244"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.asterizmIzReceive(IAsterizmEnv.IzAsterizmReceiveRequestDto)._dto (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#438) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.asterizmIzReceive(IAsterizmEnv.IzAsterizmReceiveRequestDto)._dto](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L438) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 438,
                  "endLine": 438
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "54d6a418263b15123164348f6316ea102802fc6f49530ff24a107fd442af77d3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC721BurnableUpgradeable.__ERC721Burnable_init() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#15-16) is not in mixedCase\n",
            "markdown": "Function [ERC721BurnableUpgradeable.__ERC721Burnable_init()](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#L15-L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "557b406d4f20073bd32581bea88864b0a25ec7abb3366bf002055ea03a8f804c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function OwnableUpgradeable.__Ownable_init() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#29-31) is not in mixedCase\n",
            "markdown": "Function [OwnableUpgradeable.__Ownable_init()](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L29-L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "564a84db84ff90549701d9e3401970ecd35bb55e38a0ae2758178a34b03f99e8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmHashLib.buildSimpleHash(bytes)._packed (node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmHashLib.buildSimpleHash(bytes)._packed](node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "579e2a4642f891be0f84c38cbd894af1925f76e2e7f94d7e04882dbf605dc553"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.removeBlockAddress(uint64,uint256)._address (contracts/AsterizmInitializerV1.sol#134) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.removeBlockAddress(uint64,uint256)._address](contracts/AsterizmInitializerV1.sol#L134) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "57a14540a1c1a36eab7060739d37cff4906578137831023830fb2a3974038ce8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.safeMint(address,uint256,uint256,uint256)._startTime (contracts/DeGuardNFT.sol#104) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.safeMint(address,uint256,uint256,uint256)._startTime](contracts/DeGuardNFT.sol#L104) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "587fd26fb4ceffcc7b83caaceb999a09e418d1ae09bb39ebfafa222062341f75"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.setMaxUsdAmount(uint256)._amount (contracts/projects/gas/GasStationUpgradeableV1.sol#83) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.setMaxUsdAmount(uint256)._amount](contracts/projects/gas/GasStationUpgradeableV1.sol#L83) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5b35cf449f7df3997f9485be1f494171f3dd4c72f3ce213bb12881893e81540d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.addChain(uint64,uint8)._chainType (contracts/AsterizmTranslatorV1.sol#151) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.addChain(uint64,uint8)._chainType](contracts/AsterizmTranslatorV1.sol#L151) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5bd61b20ce010493bdc4e6db0dc5ca535ff9f0a9b206d4a68ccb314f9210e8db"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)._chainIds (contracts/projects/gas/GasStation.sol#141) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)._chainIds](contracts/projects/gas/GasStation.sol#L141) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5cf1a17ac82897a3c25d176afa41243c176848f53a4402aa17d6556f13c5cb6c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.removeTrustedAddress(uint64)._chainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#295) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.removeTrustedAddress(uint64)._chainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L295) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d73d4322a31874d025df6b5f3558928225d7f054b34001bb385e74f6f715f04"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC721BurnableUpgradeable.__ERC721Burnable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#18-19) is not in mixedCase\n",
            "markdown": "Function [ERC721BurnableUpgradeable.__ERC721Burnable_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#L18-L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5e8602586ef8aab05aa050da3664579c19f8207e4827c8c1b37450c65132d4f7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.getChainType(uint64)._chainId (contracts/AsterizmInitializerV1.sol#156) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.getChainType(uint64)._chainId](contracts/AsterizmInitializerV1.sol#L156) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5f404bd2d50b2f808f6e6780f7c6da288b80205e743f88bd9c4c30a60d806866"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.setMinUsdAmount(uint256)._amount (contracts/projects/gas/GasStation.sol#110) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.setMinUsdAmount(uint256)._amount](contracts/projects/gas/GasStation.sol#L110) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5f8766bc5e81ac4bdef4e4ff2e4df03b289be5c5a3de1e3cc8a1f7b9f22c7b04"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.updatePlan(uint256,uint256,uint256,uint256)._daysRange (contracts/DeGuardNFT.sol#245) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.updatePlan(uint256,uint256,uint256,uint256)._daysRange](contracts/DeGuardNFT.sol#L245) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 245,
                  "endLine": 245
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "622dc8693ce3c82e6c98b41989685df47b657f445d39400e9f15c7d868164117"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC721BurnableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#38) is not in mixedCase\n",
            "markdown": "Variable [ERC721BurnableUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6302d29f1a82fcb310574a13155a2100b048e81b370e3ed4f94f6563696a47fe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable OwnableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#94) is not in mixedCase\n",
            "markdown": "Variable [OwnableUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L94) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "64595b3b974ce422ded6f4c3e75f4b8f263d80fe654b483274d85ea78d93515d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStatioValidator.addStableCoin(address)._tokenAddress (contracts/projects/gas/base/GasStationValidator.sol#36) is not in mixedCase\n",
            "markdown": "Parameter [GasStatioValidator.addStableCoin(address)._tokenAddress](contracts/projects/gas/base/GasStationValidator.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "64fe00f7b9cb1c6422b940389348f54e4978613f399e99cb3d431c2a281f7f17"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._srcAddress (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#450) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._srcAddress](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L450) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 450,
                  "endLine": 450
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "660779496c797f61f2035a3547d7103e899832a0116ed965b9d2cb92d5e71204"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC721Upgradeable.__ERC721_init_unchained(string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#49-52) is not in mixedCase\n",
            "markdown": "Function [ERC721Upgradeable.__ERC721_init_unchained(string,string)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L49-L52) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6663973ee0e795bc2836ac531f4a48f3c2e1c963327dc2b51269e4c01970b79a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.initialize(IInitializerSender,bool)._useForceOrder (contracts/projects/gas/GasStationUpgradeableV1.sol#38) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.initialize(IInitializerSender,bool)._useForceOrder](contracts/projects/gas/GasStationUpgradeableV1.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "667c3e699d157b150e101fa4e0e88f6dd7da56814d15e0ad22dfef794774eff8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable UUPSUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#111) is not in mixedCase\n",
            "markdown": "Variable [UUPSUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L111) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "66e89635b3f1a39420c14852bce53cece9d715d261ed362fdfe323326d902681"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.withdrawCoins(address,uint256)._amount (contracts/projects/gas/GasStation.sol#47) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.withdrawCoins(address,uint256)._amount](contracts/projects/gas/GasStation.sol#L47) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "67bcc6fc1ac79b966937a2ecdd23b193f2e27f73323e4594b32ef73511ee6d83"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._transferHash (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#450) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._transferHash](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L450) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 450,
                  "endLine": 450
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a0d72f44ed31c5f99c4cdef225a2893a8d9e605a02be5cb6d18fa4a911fbf44"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.sendGas(uint64[],uint256[],uint256[],IERC20)._token (contracts/projects/gas/GasStationUpgradeableV1.sol#107) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.sendGas(uint64[],uint256[],uint256[],IERC20)._token](contracts/projects/gas/GasStationUpgradeableV1.sol#L107) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c91c4968c9691f3dd66e13edc20285bdda2fa4389f6f887b273c35eb7ec45a5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.increaseNonce(uint64,bytes)._pathData (contracts/AsterizmNonce.sol#48) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.increaseNonce(uint64,bytes)._pathData](contracts/AsterizmNonce.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d97c6b5b3b28f024684cea8127d7801b137dc4503b1bfdac17a66b85b34cf51"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.setInBoundNonce(INonce)._nonce (contracts/AsterizmInitializerV1.sol#118) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.setInBoundNonce(INonce)._nonce](contracts/AsterizmInitializerV1.sol#L118) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "704695ca4aefa8a5005ccb9c5f0a496b607e76bbb79bd40a992be0e37bf459e5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStatioValidator.setMaxUsdAmountPerChain(uint256)._amount (contracts/projects/gas/base/GasStationValidator.sol#76) is not in mixedCase\n",
            "markdown": "Parameter [GasStatioValidator.setMaxUsdAmountPerChain(uint256)._amount](contracts/projects/gas/base/GasStationValidator.sol#L76) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "708657a217ee4965a7a261389fcd1b9902f9048a934660fdb753a8f75c2386c4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStatioValidator.calcSendingAmount(uint256[],IERC20)._token (contracts/projects/gas/base/GasStationValidator.sol#90) is not in mixedCase\n",
            "markdown": "Parameter [GasStatioValidator.calcSendingAmount(uint256[],IERC20)._token](contracts/projects/gas/base/GasStationValidator.sol#L90) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "72737402ad3dc4b32fbadbbcebb2c02984459c734bf5b026cf0cb416e9a8f49d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStatioValidator.setMinUsdAmount(uint256)._amount (contracts/projects/gas/base/GasStationValidator.sol#55) is not in mixedCase\n",
            "markdown": "Parameter [GasStatioValidator.setMinUsdAmount(uint256)._amount](contracts/projects/gas/base/GasStationValidator.sol#L55) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "77e52b6503aa6aee958745745901d21fe2ae57e1be27dc482687f8ecdfd7c907"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.addStableCoin(address)._tokenAddress (contracts/projects/gas/GasStationUpgradeableV1.sol#57) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.addStableCoin(address)._tokenAddress](contracts/projects/gas/GasStationUpgradeableV1.sol#L57) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7862f57ea1eef2014b0a0de690f2161f39cc6f0a1c2c91b96011ec5c9b1e5929"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC1967UpgradeUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#169) is not in mixedCase\n",
            "markdown": "Variable [ERC1967UpgradeUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L169) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a925ee243c35fcbf7d26a13c9439f5f52653d41557544bf25a6dea8e1255a36"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32)._dstChainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#384) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32)._dstChainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L384) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "81c2f9e4ae72d8650f099469d09b5cbf3c7af229cb1e6e066ef7e154d1cf543d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.addTrustedAddresses(uint64[],uint256[])._chainIds (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#287) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.addTrustedAddresses(uint64[],uint256[])._chainIds](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L287) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 287
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "81ed90b66d45397eef78c743eb2836178f20c3aef611e8ffa437bdb1d08bbb81"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#40-42) is not in mixedCase\n",
            "markdown": "Function [ReentrancyGuardUpgradeable.__ReentrancyGuard_init()](node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#L40-L42) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8358359e33b12b973b39646749b14bc461ec4795e26f2669ed0c3b687a34fd7c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.getTrustedAddresses(uint64)._chainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#358) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.getTrustedAddresses(uint64)._chainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L358) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 358,
                  "endLine": 358
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "84f9468326b27a73ec0f6ac340b1eb4befe9c9ca2083d9ce245cc6e14faaa26d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC165Upgradeable.__ERC165_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#27-28) is not in mixedCase\n",
            "markdown": "Function [ERC165Upgradeable.__ERC165_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L27-L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "85d4e6d503145e70d4f27b51c03c2aecc7efa120329a4cf27b34d33cd9a2c942"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase\n",
            "markdown": "Function [ContextUpgradeable.__Context_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L21-L22) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8629c89abc9e568d22212182eb038287fc4f676ff34add41294173d644b25bcb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.initAsterizmTransfer(uint64,uint256,bytes32)._transferHash (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#393) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.initAsterizmTransfer(uint64,uint256,bytes32)._transferHash](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L393) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 393
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8bd31e2bfc624938d84205bcf2db006b9f0e6779d79abbece2217413e7236eb7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.resendTransfer(bytes32)._transferHash (contracts/AsterizmInitializerV1.sol#177) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.resendTransfer(bytes32)._transferHash](contracts/AsterizmInitializerV1.sol#L177) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 177,
                  "endLine": 177
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8c5acff089dc972750fd2e0288cba5673999a5cfa3282b31b5cedaa905354c92"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.crossChainTransfer(uint64,address,address,uint256)._to (contracts/DeGuardNFT.sol#276) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.crossChainTransfer(uint64,address,address,uint256)._to](contracts/DeGuardNFT.sol#L276) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8cd5c56bf60cc003d7e2f475548f8cac455935a8811cd9ce9d55afb6ce48f3d4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._srcAddress (contracts/base/AsterizmClient.sol#383) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._srcAddress](contracts/base/AsterizmClient.sol#L383) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 383,
                  "endLine": 383
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d8b8477a8eaca5279da98adb6729055182a2849d2538ad8db546533409dd889"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function UUPSUpgradeable.__UUPSUpgradeable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#26-27) is not in mixedCase\n",
            "markdown": "Function [UUPSUpgradeable.__UUPSUpgradeable_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L26-L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ff7b5e08e6880768da974c4a296eba4ffa484881ed81786ba37c7da4749321d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.removeChainById(uint64)._chainId (contracts/AsterizmTranslatorV1.sol#169) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.removeChainById(uint64)._chainId](contracts/AsterizmTranslatorV1.sol#L169) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "917c00794aae00171351ec94d63e4a41e723a75801ac890ee47a0306f931144b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.updatePlan(uint256,uint256,uint256,uint256)._id (contracts/DeGuardNFT.sol#243) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.updatePlan(uint256,uint256,uint256,uint256)._id](contracts/DeGuardNFT.sol#L243) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "92662508c39f7e57b13d01304c004cf9a935df48b6db4992a3dcd54026af492c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._txId (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#459) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._txId](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L459) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 459,
                  "endLine": 459
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "927e5441e644d612cae76a4fec1c61c6cb7375503a4631929ad1d380c21de62d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.setInitializer(IInitializerReceiver)._initializerReceiver (contracts/AsterizmTranslatorV1.sol#143) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.setInitializer(IInitializerReceiver)._initializerReceiver](contracts/AsterizmTranslatorV1.sol#L143) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "93d8af98ac443bd52809b60f7c3d09d1acd2f13b00228766bbed5dd14d928be2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.addTrustedAddresses(uint64[],uint256[])._trustedAddresses (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#287) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.addTrustedAddresses(uint64[],uint256[])._trustedAddresses](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L287) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 287
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "946e60dd1603e40da1143ce15761e848876925a94bab38aa213f774ae253e652"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AddressLib.toUint(address)._address (node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [AddressLib.toUint(address)._address](node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/AddressLib.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "948648c98c203cb8048a0630c76684307a98b38c9bdac43b43cc069f60b42fe6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.withdrawTokens(IERC20,address,uint256)._target (contracts/projects/gas/GasStation.sol#58) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.withdrawTokens(IERC20,address,uint256)._target](contracts/projects/gas/GasStation.sol#L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95e576f6c911f59ed0ea8782a4f7d6a881bd2a1f1fda823b412117c7af2a3380"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.addChains(uint64[],uint8[])._chainTypes (contracts/AsterizmTranslatorV1.sol#161) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.addChains(uint64[],uint8[])._chainTypes](contracts/AsterizmTranslatorV1.sol#L161) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "976c1c906b7125564aa541f02bff11373a6d0ccfe9d227d73f8c41ac5dd9d66b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ReentrancyGuardUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#88) is not in mixedCase\n",
            "markdown": "Variable [ReentrancyGuardUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#L88) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "986ae09dbfc7cd653b3ef951464dacdcf741b823cf0590804bd79e4641ef863a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.initialize(uint64,uint8)._localChainType (contracts/AsterizmTranslatorV1.sol#89) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.initialize(uint64,uint8)._localChainType](contracts/AsterizmTranslatorV1.sol#L89) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "99801bdbd91122b57d4ce8124091deb026982ea60a986d5b4168a879e47cc7e3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#59) is not in mixedCase\n",
            "markdown": "Function [IERC20Permit.DOMAIN_SEPARATOR()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#L59) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a77c79a6cf40e2f151723e49ba63d30100a56d0f72688e58cdf4a550a6ff843"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.withdrawCoins(address,uint256)._amount (contracts/projects/gas/GasStationUpgradeableV1.sol#48) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.withdrawCoins(address,uint256)._amount](contracts/projects/gas/GasStationUpgradeableV1.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c4ede663e8202e4b0b5bc12a65f1448ea886d33acbe399dac59637d821667f6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)._token (contracts/projects/gas/GasStation.sol#141) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.sendGas(uint64[],uint256[],uint256[],IERC20)._token](contracts/projects/gas/GasStation.sol#L141) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9cad7de589cf47ea686a565e5b21606e0fb867bf33b2f71d44a20d49feed7bc3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.addTrustedAddress(uint64,uint256)._trustedAddress (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#285) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.addTrustedAddress(uint64,uint256)._trustedAddress](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L285) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9d5f0c78bccc5abc9e568d58df2724e67bcd3a6dbbc4716dad5414407278321b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.transferSendingResultNotification(bytes32,uint8)._transferHash (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#419) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.transferSendingResultNotification(bytes32,uint8)._transferHash](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L419) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 419,
                  "endLine": 419
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9f9c08c218af36a3e5c0ace68470be236a68c8adeb2bd832e49ab192d401ac47"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._txId (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#450) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._txId](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L450) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 450,
                  "endLine": 450
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9fddfb271a89d805b62bd6e688e690664925ae2a2d70b45a1359a91f36cfc9d3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.setMaxUsdAmountPerChain(uint256)._amount (contracts/projects/gas/GasStationUpgradeableV1.sol#97) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.setMaxUsdAmountPerChain(uint256)._amount](contracts/projects/gas/GasStationUpgradeableV1.sol#L97) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a352460d683a41b99bdc892cd8cb04393c2d8249949cb20fa4db752790ebfeac"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.withdrawNotExistsTokens(IERC20,address,uint256)._target (contracts/projects/gas/GasStation.sol#75) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.withdrawNotExistsTokens(IERC20,address,uint256)._target](contracts/projects/gas/GasStation.sol#L75) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a45ce61506fa35766462a0002ddd4aacadf41d252718297b5fd352db3043f061"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._srcAddress (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#459) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._srcAddress](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L459) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 459,
                  "endLine": 459
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a69924708f2ee9c1578c49f334b258b7b43a05e0b3689836b2ff57dd971213f8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.transferMessage(uint256,bytes)._gasLimit (contracts/AsterizmTranslatorV1.sol#243) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.transferMessage(uint256,bytes)._gasLimit](contracts/AsterizmTranslatorV1.sol#L243) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab254aa0907a1caae72daea7acffa5becc61470cf2f0bd963feacc783f2149b2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32,bytes)._dstChainId (contracts/base/AsterizmClient.sol#325) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32,bytes)._dstChainId](contracts/base/AsterizmClient.sol#L325) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "abac724a0edd9b7b9545fcc314d75ee7f76649c955b6ff47e77a7f679693c103"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.addStableCoin(address)._tokenAddress (contracts/projects/gas/GasStation.sol#91) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.addStableCoin(address)._tokenAddress](contracts/projects/gas/GasStation.sol#L91) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "abd93a209b62441fb57a32bf4bb25df1aee8cc008ef372d7f665ca707391ba6f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.addSender(address)._sender (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#269) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.addSender(address)._sender](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L269) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad0fef9d300e4d28013cd34d12998bff60640d940af31a78df24e165feb4eca2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.initialize(IInitializerSender)._initializerLib (contracts/DeGuardNFT.sol#85) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.initialize(IInitializerSender)._initializerLib](contracts/DeGuardNFT.sol#L85) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aebf798ac24a453fd51ccf12fbb7d24db35de23c934c69541f561d3c5e9bc57c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.withdrawCoins(address,uint256)._target (contracts/projects/gas/GasStation.sol#47) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.withdrawCoins(address,uint256)._target](contracts/projects/gas/GasStation.sol#L47) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aff1476b41c27a52e7d7df39d04c135236cd6d483a26aaa581044a84b8f8c9bc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.__AsterizmClientUpgradeable_init(IInitializerSender,bool,bool)._initializerLib (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#112) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.__AsterizmClientUpgradeable_init(IInitializerSender,bool,bool)._initializerLib](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L112) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b01c4f8cb7e45fff1cdab8d0b60edb08ff35b8a3530a653b15a6a97c2b44d808"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.setMinUsdAmount(uint256)._amount (contracts/projects/gas/GasStationUpgradeableV1.sol#76) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.setMinUsdAmount(uint256)._amount](contracts/projects/gas/GasStationUpgradeableV1.sol#L76) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b0835a078dd9cee66a79ab5536c1a6497146f8d8dfe2acb080299c0ca030196e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32)._txId (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#384) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32)._txId](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L384) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b28ac8da44807083fdfe9be66599b9461152c1d6ba3c9aed2868e73bce6a23e1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.initialize(uint64,uint8)._localChainId (contracts/AsterizmTranslatorV1.sol#89) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.initialize(uint64,uint8)._localChainId](contracts/AsterizmTranslatorV1.sol#L89) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b35824a74cd4b9c70a972794c782ff112601c5d8f08fde39586a20c7ee1bbb1e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.resendAsterizmTransfer(bytes32)._transferHash (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#416) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.resendAsterizmTransfer(bytes32)._transferHash](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L416) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 416,
                  "endLine": 416
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b4d7a30e21176f792f599c93a04373867304df4ea9d1f9f4dfdb0461e878e827"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._payload (contracts/base/AsterizmClient.sol#383) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._payload](contracts/base/AsterizmClient.sol#L383) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 383,
                  "endLine": 383
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b52d464610ff262953bc3937f5a7a2e2aa5bdb906dd50567ae2704a7d576ddab"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._payload (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#459) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._payload](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L459) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 459,
                  "endLine": 459
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b5a8f140e606b3f1c3077db79b59a93a62dbdc801d2d713b7d0883c890181b47"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.sendGas(uint64[],uint256[],uint256[],IERC20)._receivers (contracts/projects/gas/GasStationUpgradeableV1.sol#107) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.sendGas(uint64[],uint256[],uint256[],IERC20)._receivers](contracts/projects/gas/GasStationUpgradeableV1.sol#L107) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b6b14cc120504e200a364c510bef47983e13c0221032b3ea42eb10325d1a4701"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.addPlan(uint256,uint256,uint256)._daysRange (contracts/DeGuardNFT.sol#209) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.addPlan(uint256,uint256,uint256)._daysRange](contracts/DeGuardNFT.sol#L209) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b70e91cf7a537b0366cc17715d5a9e5b5d6f1e370fff285fbd12a366f9daa21e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.withdrawNotExistsTokens(IERC20,address,uint256)._token (contracts/projects/gas/GasStation.sol#75) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.withdrawNotExistsTokens(IERC20,address,uint256)._token](contracts/projects/gas/GasStation.sol#L75) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b9f807c762770f51c1eb00219b92999e5ad5f4b237d5d906d155983e4bb57bb2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.initialize(IInitializerSender,bool)._initializerLib (contracts/projects/gas/GasStationUpgradeableV1.sol#38) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.initialize(IInitializerSender,bool)._initializerLib](contracts/projects/gas/GasStationUpgradeableV1.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "baabe98cecf798e16033bde45326df7168453b9636c51b1bd9f9642b9751a4a9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.setExternalRelay(address)._externalRelay (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#255) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.setExternalRelay(address)._externalRelay](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L255) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 255,
                  "endLine": 255
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bc86c55147b5a9bee34d716ce74bf4a050685ad2f3847f25cad3ea6ef3506efe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.removeSender(address)._sender (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#267) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.removeSender(address)._sender](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L267) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd6ea051eadfdb3ecabf0e4a468ffdc07c9a61ff68ab0c753ebc16385ba94396"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC165Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#41) is not in mixedCase\n",
            "markdown": "Variable [ERC165Upgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L41) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bdc2d8e808ddb749222cd3ed859af1782e2e982c72c8164d541233f50dec05af"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.addTrustedAddress(uint64,uint256)._chainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#285) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.addTrustedAddress(uint64,uint256)._chainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L285) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 285,
                  "endLine": 285
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bdcb441f51ae97b0611b7db89910f186f17de78533448c711e29ec7d46c60cfc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.safeMint(address,uint256,uint256,uint256)._id (contracts/DeGuardNFT.sol#104) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.safeMint(address,uint256,uint256,uint256)._id](contracts/DeGuardNFT.sol#L104) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bddea9a01b218cad5e543a70e201a369ef67c10f0369f9ea728dab7bed9b67a5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function OwnableUpgradeable.__Ownable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#33-35) is not in mixedCase\n",
            "markdown": "Function [OwnableUpgradeable.__Ownable_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#L33-L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be1436ad6e7661ea17048b9b8432553bbd982a53256f0d44f0dddb582fee6a05"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable UUPSUpgradeable.__self (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#29) is not in mixedCase\n",
            "markdown": "Variable [UUPSUpgradeable.__self](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bfe49cc9b28397f73932ef963ff532a1f0ce51ddd0b26dae025d661602049864"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._srcChainId (contracts/base/AsterizmClient.sol#383) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._srcChainId](contracts/base/AsterizmClient.sol#L383) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 383,
                  "endLine": 383
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bfee784438aa2f2ea07ff2509343c9cb04baee774ee59d3e6aaa3b2b04859d6a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC721EnumerableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#171) is not in mixedCase\n",
            "markdown": "Variable [ERC721EnumerableUpgradeable.__gap](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L171) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c1c66100645521752761aa0f1ef33db01219e01289f3888e9b8e783cac21b6c3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.increaseNonceWithValidation(uint64,bytes,uint256)._pathData (contracts/AsterizmNonce.sol#58) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.increaseNonceWithValidation(uint64,bytes,uint256)._pathData](contracts/AsterizmNonce.sol#L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c203d460db6b0dda35200edee5f8a10fc497ae252af83df91ca947067b19fe8e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC1967UpgradeUpgradeable.__ERC1967Upgrade_init() (node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#20-21) is not in mixedCase\n",
            "markdown": "Function [ERC1967UpgradeUpgradeable.__ERC1967Upgrade_init()](node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol#L20-L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c342a80969d569f908a2cc5e14462dacdf5979e90597c95494a7518ab22ac361"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.initAsterizmTransfer(uint64,uint256,bytes32)._dstChainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#393) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.initAsterizmTransfer(uint64,uint256,bytes32)._dstChainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L393) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 393,
                  "endLine": 393
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3fcbed5ee0d120860205b04c634be8ced348b84eae1b7011bd8888c19a5948d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.getNonceBase(uint64,uint256,uint256)._dstAddress (contracts/AsterizmNonce.sol#76) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.getNonceBase(uint64,uint256,uint256)._dstAddress](contracts/AsterizmNonce.sol#L76) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7e320269c4fb8467f50dfb290aadd3eb24fdc857d85f1715deda309e94638f3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._srcChainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#459) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._srcChainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L459) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 459,
                  "endLine": 459
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c8e04fe2ff9b50948c78805500c0ca87e6c9cdcea8dce30572a33c28728421f8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function UUPSUpgradeable.__UUPSUpgradeable_init() (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#23-24) is not in mixedCase\n",
            "markdown": "Function [UUPSUpgradeable.__UUPSUpgradeable_init()](node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol#L23-L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cb76c4a025b81b1d34120a39f72a25e8426de1c2f55fbd29d6a5eb8442335219"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.removeStableCoin(address)._tokenAddress (contracts/projects/gas/GasStation.sol#103) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.removeStableCoin(address)._tokenAddress](contracts/projects/gas/GasStation.sol#L103) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd6939e222d4f4b03612eb2985d051c2c227e237e361856e2d3a71c034b14885"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.addTrustedAddresses(uint64[],uint256[])._chainIds (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#296) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.addTrustedAddresses(uint64[],uint256[])._chainIds](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L296) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cf63b184be270bfe3bdc1810ba6ac74fa2f86213621a334e27b5c678d8933d43"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.forceSetNonce(uint64,bytes,uint256)._pathData (contracts/AsterizmNonce.sol#84) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.forceSetNonce(uint64,bytes,uint256)._pathData](contracts/AsterizmNonce.sol#L84) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cfe74db21aaf4aff38122297d4e50e7760ca0ee65a5380d654ac7b246fe13cc4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.getNonceBase(uint64,uint256,uint256)._srcAddress (contracts/AsterizmNonce.sol#76) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.getNonceBase(uint64,uint256,uint256)._srcAddress](contracts/AsterizmNonce.sol#L76) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d1f6310ded79e58e0953c7ed4d0a00d6126ae61158a092bd68808e6512888b63"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmHashLib.buildCrosschainHash(bytes)._packed (node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmHashLib.buildCrosschainHash(bytes)._packed](node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/libs/AsterizmHashLib.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d33e5c5ee42a8f5cb82edabf6695fc19f7c67b98b64407d84e7142d1ab059fc7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.setExternalRelay(address)._externalRelay (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#246) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.setExternalRelay(address)._externalRelay](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L246) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 246,
                  "endLine": 246
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d3439d8854893aa27ff5eeabb267ab7689d5e9200a4075bac7e4f4c25c788072"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._srcChainId (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#450) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._srcChainId](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L450) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 450,
                  "endLine": 450
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6f7db6aeec031ed3ed27fa6c66538e282a0eac98cc9aca933ac1a8cd76b5eea"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32)._transferHash (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#384) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32)._transferHash](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L384) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d9e266b7cd4713b85a379e6759ec14acbaf4e1b9d1d1ca157133232e0a53f1ca"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStatioValidator.removeStableCoin(address)._tokenAddress (contracts/projects/gas/base/GasStationValidator.sol#48) is not in mixedCase\n",
            "markdown": "Parameter [GasStatioValidator.removeStableCoin(address)._tokenAddress](contracts/projects/gas/base/GasStationValidator.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "df15ea136ba773576c11c70ec80caf5551ea2a9fe587b33912d3d6bf66f23536"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC721EnumerableUpgradeable.__ERC721Enumerable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#19-20) is not in mixedCase\n",
            "markdown": "Function [ERC721EnumerableUpgradeable.__ERC721Enumerable_init_unchained()](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L19-L20) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e0df55560b6c10ab71f6bb7e8f5744170fe93e7b3b9493b33f59b4547e76b57d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.tokensOfOwner(address)._owner (contracts/DeGuardNFT.sol#134) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.tokensOfOwner(address)._owner](contracts/DeGuardNFT.sol#L134) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e101337c8505586589ab58104e071021ce71156bfc70fca7eb37407473738a30"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.buyPlan(uint256,uint64,address,bool)._to (contracts/DeGuardNFT.sol#183) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.buyPlan(uint256,uint64,address,bool)._to](contracts/DeGuardNFT.sol#L183) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e2136e39e0194dcb6d52d565496be1ef9a1eeae2e572b11586335f34dd15ee02"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.increaseNonceWithValidation(uint64,bytes,uint256)._chainId (contracts/AsterizmNonce.sol#58) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.increaseNonceWithValidation(uint64,bytes,uint256)._chainId](contracts/AsterizmNonce.sol#L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e365f85353dd355bda3d99237cee551ab60689d9dddc4a2aa59d75b2ce0f98a3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.withdraw(address,uint256)._amount (contracts/AsterizmTranslatorV1.sol#120) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.withdraw(address,uint256)._amount](contracts/AsterizmTranslatorV1.sol#L120) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e3d22c384e396cba49e34c4edf3ea457f5c4580a9dcbcb521f876cf66f5332fa"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.__AsterizmClientUpgradeable_init(IInitializerSender,bool,bool)._notifyTransferSendingResult (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#112) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.__AsterizmClientUpgradeable_init(IInitializerSender,bool,bool)._notifyTransferSendingResult](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L112) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e3f7a812b146a76094d1e6966af897cedda6e6c1af6e80d22848cbca9092576e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.updatePlan(uint256,uint256,uint256,uint256)._priceInUSD (contracts/DeGuardNFT.sol#244) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.updatePlan(uint256,uint256,uint256,uint256)._priceInUSD](contracts/DeGuardNFT.sol#L244) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 244,
                  "endLine": 244
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e52fbeee7210a7e6d567d7f49f7e78d3b9784dc643bc45ef4748ec88981c6dd4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.isValid(address,uint256)._owner (contracts/DeGuardNFT.sol#156) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.isValid(address,uint256)._owner](contracts/DeGuardNFT.sol#L156) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e730b108a164130a3a54b5f38b1ecad55720b97d3f972f5d0a7551f612c2dd17"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.addTrustedAddress(uint64,uint256)._trustedAddress (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#276) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.addTrustedAddress(uint64,uint256)._trustedAddress](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L276) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e87353764bf0537482f6d8c5dcd45562ae2cb9cea0f22553c77c2b453797b631"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.getChainType(uint64)._chainId (contracts/AsterizmTranslatorV1.sol#194) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.getChainType(uint64)._chainId](contracts/AsterizmTranslatorV1.sol#L194) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 194
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8ad00f677353988ed71fe87916d758595adf04cb45eedf563858432731c83fc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function AsterizmClientUpgradeable.__AsterizmClientUpgradeable_init(IInitializerSender,bool,bool) (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#112-123) is not in mixedCase\n",
            "markdown": "Function [AsterizmClientUpgradeable.__AsterizmClientUpgradeable_init(IInitializerSender,bool,bool)](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L112-L123) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 123
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9e73eebc8d05085a93a3facdba066e3f174a8160481ebfd4dee1b15b2c3fb4b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStatioValidator.setMaxUsdAmount(uint256)._amount (contracts/projects/gas/base/GasStationValidator.sol#62) is not in mixedCase\n",
            "markdown": "Parameter [GasStatioValidator.setMaxUsdAmount(uint256)._amount](contracts/projects/gas/base/GasStationValidator.sol#L62) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ec3eaafa144bdcd543f4c2841094733ca39f7cecc46478a14dc759540edf8f22"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#18-19) is not in mixedCase\n",
            "markdown": "Function [ContextUpgradeable.__Context_init()](node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#L18-L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ec47067e22967ab37ddb79c5eae4c225b0c9f1e4e15f1452db70b0a6f86103e0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.isValid(address,uint256)._id (contracts/DeGuardNFT.sol#156) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.isValid(address,uint256)._id](contracts/DeGuardNFT.sol#L156) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ec7a0692717aa77f45eeb1911a00d5993258afc9311dbe65095074ebd79c9339"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.transferSendingResultNotification(bytes32,uint8)._transferHash (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#428) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.transferSendingResultNotification(bytes32,uint8)._transferHash](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L428) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 428
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ecabe13d365f24b2f058ebdb99f5f4c9739f9555ca3b747a0a345919268537a2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStation.setMinUsdAmountPerChain(uint256)._amount (contracts/projects/gas/GasStation.sol#124) is not in mixedCase\n",
            "markdown": "Parameter [GasStation.setMinUsdAmountPerChain(uint256)._amount](contracts/projects/gas/GasStation.sol#L124) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStation.sol"
                },
                "region": {
                  "startLine": 124,
                  "endLine": 124
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f1b332ddef750389caf00842912449707d05bd2670222bad6df3ccc54cf9013d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32,bytes)._transferHash (contracts/base/AsterizmClient.sol#325) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.initAsterizmTransfer(uint64,uint256,bytes32,bytes)._transferHash](contracts/base/AsterizmClient.sol#L325) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f218f26528e5a83b5678eaf8082998837e04a0f1b226470a405e3438409e4af9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC165Upgradeable.__ERC165_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#24-25) is not in mixedCase\n",
            "markdown": "Function [ERC165Upgradeable.__ERC165_init()](node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#L24-L25) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f226b70c0c428d938e421293c43b68d973d744168b94b568e0deb7b189c26f50"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC721Upgradeable.__unsafe_increaseBalance(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#468-470) is not in mixedCase\n",
            "markdown": "Function [ERC721Upgradeable.__unsafe_increaseBalance(address,uint256)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L468-L470) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol"
                },
                "region": {
                  "startLine": 468,
                  "endLine": 470
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2a8d65d3ba955ba66e54fca3e0eba0b9cd192f840498623175d6c67842a9622"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.crossChainTransfer(uint64,address,address,uint256)._from (contracts/DeGuardNFT.sol#276) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.crossChainTransfer(uint64,address,address,uint256)._from](contracts/DeGuardNFT.sol#L276) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 276,
                  "endLine": 276
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f356c6ed380c45835b367a360225dd26582f5726bdbb4b16ca811ffc43995949"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._txId (contracts/base/AsterizmClient.sol#383) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.asterizmClReceive(uint64,uint256,uint256,uint256,bytes32,bytes)._txId](contracts/base/AsterizmClient.sol#L383) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 383,
                  "endLine": 383
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f493416d06b25695ee8cfdca349532758e2596c0ed3cb4967ffc367806e71348"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.increaseNonce(uint64,bytes)._chainId (contracts/AsterizmNonce.sol#48) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.increaseNonce(uint64,bytes)._chainId](contracts/AsterizmNonce.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f4cf84fda0d195536002bf62da397110167f0b777bd3732f65b5e557d478004a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStatioValidator.setMinUsdAmountPerChain(uint256)._amount (contracts/projects/gas/base/GasStationValidator.sol#69) is not in mixedCase\n",
            "markdown": "Parameter [GasStatioValidator.setMinUsdAmountPerChain(uint256)._amount](contracts/projects/gas/base/GasStationValidator.sol#L69) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f54d092ac4afd65c9dfb7bd62ade436aead6af28769d9ebc5364636f1d1b315d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmNonce.forceSetNonce(uint64,bytes,uint256)._nonce (contracts/AsterizmNonce.sol#84) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmNonce.forceSetNonce(uint64,bytes,uint256)._nonce](contracts/AsterizmNonce.sol#L84) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmNonce.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5f92fe0c9b6cb636c88dbeb4e460bb03a70736f4b0da38f3d9103c4125da84d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.transferMessage(uint256,bytes)._payload (contracts/AsterizmTranslatorV1.sol#243) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.transferMessage(uint256,bytes)._payload](contracts/AsterizmTranslatorV1.sol#L243) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6c701cfe56c074be6567cc374e4233bc5e80a5e0971642062442833db540090"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.buyPlan(uint256,uint64,address,bool)._dstChainId (contracts/DeGuardNFT.sol#183) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.buyPlan(uint256,uint64,address,bool)._dstChainId](contracts/DeGuardNFT.sol#L183) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f9042e3a67abf01f8fa8aa29b0ea0f267506c6b83150ebd634b6959d2978ef9c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter DeGuardNFT.getRange(address,uint256)._id (contracts/DeGuardNFT.sol#145) is not in mixedCase\n",
            "markdown": "Parameter [DeGuardNFT.getRange(address,uint256)._id](contracts/DeGuardNFT.sol#L145) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fb40e0e91cde9b1b8e24265df9d6c0c390d31b360dc2992775eb6676cc9ddba0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._transferHash (node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#459) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClientUpgradeable.asterizmClReceive(uint64,uint256,uint256,bytes32,bytes)._transferHash](node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol#L459) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClientUpgradeable.sol"
                },
                "region": {
                  "startLine": 459,
                  "endLine": 459
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd13624f7c062fc75b8137dcdcff29c60ed203f27d44198d7e2b8e48233513a1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmTranslatorV1.sendMessage(IAsterizmEnv.TrSendMessageRequestDto)._dto (contracts/AsterizmTranslatorV1.sol#201) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmTranslatorV1.sendMessage(IAsterizmEnv.TrSendMessageRequestDto)._dto](contracts/AsterizmTranslatorV1.sol#L201) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmTranslatorV1.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 201
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fe13e8d3d0cea8cf1497a39e4b153dbc6e0e129e132c44b2688cd2cd256737a3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmInitializerV1.validIncomeTransferHash(bytes32)._transferHash (contracts/AsterizmInitializerV1.sol#143) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmInitializerV1.validIncomeTransferHash(bytes32)._transferHash](contracts/AsterizmInitializerV1.sol#L143) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/AsterizmInitializerV1.sol"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ff2b2f5267d7194b7c65c892b592210524e76c2321a3006cbd9124b6cee0a875"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter AsterizmClient.resendAsterizmTransfer(bytes32)._transferHash (node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#407) is not in mixedCase\n",
            "markdown": "Parameter [AsterizmClient.resendAsterizmTransfer(bytes32)._transferHash](node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol#L407) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/asterizmprotocol/contracts/evm/AsterizmClient.sol"
                },
                "region": {
                  "startLine": 407,
                  "endLine": 407
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ff746f7f31853db503322521d1e51cd45612b01641b007655b48d2c2d8e081d3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter GasStationUpgradeableV1.withdrawCoins(address,uint256)._target (contracts/projects/gas/GasStationUpgradeableV1.sol#48) is not in mixedCase\n",
            "markdown": "Parameter [GasStationUpgradeableV1.withdrawCoins(address,uint256)._target](contracts/projects/gas/GasStationUpgradeableV1.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/GasStationUpgradeableV1.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ff9812a7f05c84a85d5e7e25dfec65980655e98f87d04de76436432001fce8f7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC721Upgradeable.__ERC721_init(string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#45-47) is not in mixedCase\n",
            "markdown": "Function [ERC721Upgradeable.__ERC721_init(string,string)](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol#L45-L47) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffb0fd5588d47f9c856f1d4bd1e92a0ed00e88e578b7043b04382bada0fa00dd"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC721EnumerableUpgradeable.__ERC721Enumerable_init() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#16-17) is not in mixedCase\n",
            "markdown": "Function [ERC721EnumerableUpgradeable.__ERC721Enumerable_init()](node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol#L16-L17) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffd0d39e197bd991d6fa4401aa9456616bb649c75015a0b15db4a5155619a91a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable AsterizmChainEnv.CHAIN_TYPE_EVM (contracts/base/AsterizmChainEnv.sol#8) is too similar to AsterizmChainEnv.CHAIN_TYPE_TVM (contracts/base/AsterizmChainEnv.sol#9)\n",
            "markdown": "Variable [AsterizmChainEnv.CHAIN_TYPE_EVM](contracts/base/AsterizmChainEnv.sol#L8) is too similar to [AsterizmChainEnv.CHAIN_TYPE_TVM](contracts/base/AsterizmChainEnv.sol#L9)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/base/AsterizmChainEnv.sol"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "11f0ad361a4c811548a43808e2711b162e6b21c633ccb67126efa29273d5fcca"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "Checker.constructor(IInitializerSender) (contracts/projects/checker/Checker.sol#13-15) uses literals with too many digits:\n\t- morseText = 10100000010101010010 (contracts/projects/checker/Checker.sol#14)\n",
            "markdown": "[Checker.constructor(IInitializerSender)](contracts/projects/checker/Checker.sol#L13-L15) uses literals with too many digits:\n\t- [morseText = 10100000010101010010](contracts/projects/checker/Checker.sol#L14)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/checker/Checker.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8c1498fb44c2ac467b529aba2c5987f8002c5b84ce8b3b7d2ec8ed5af2ac5fc4"
          }
        },
        {
          "ruleId": "4-0-cache-array-length",
          "message": {
            "text": "Loop condition i < plans.length (contracts/DeGuardNFT.sol#258) should use cached array length instead of referencing `length` member of the storage array.\n ",
            "markdown": "Loop condition [i < plans.length](contracts/DeGuardNFT.sol#L258) should use cached array length instead of referencing `length` member of the storage array.\n "
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/DeGuardNFT.sol"
                },
                "region": {
                  "startLine": 258,
                  "endLine": 258
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fef3e507ce91ce7cf9210800865b13a4f984a5a5f26db6be1cfadf963be9d71b"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "GasStatioValidator._gasStation (contracts/projects/gas/base/GasStationValidator.sol#21) should be constant \n",
            "markdown": "[GasStatioValidator._gasStation](contracts/projects/gas/base/GasStationValidator.sol#L21) should be constant \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/gas/base/GasStationValidator.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fe19e20d4b0dfb221363cf95e77b540990444d31c933a7de48bdab7548860eb3"
          }
        },
        {
          "ruleId": "4-0-immutable-states",
          "message": {
            "text": "Checker.morseText (contracts/projects/checker/Checker.sol#11) should be immutable \n",
            "markdown": "[Checker.morseText](contracts/projects/checker/Checker.sol#L11) should be immutable \n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/projects/checker/Checker.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ed9a52f0e17794c27c47e5b5a360875ca0e47e4ac543e8d3a0aec58be4b91500"
          }
        }
      ]
    }
  ]
}